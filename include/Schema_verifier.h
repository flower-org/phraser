#ifndef SCHEMA_VERIFIER_H
#define SCHEMA_VERIFIER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef SCHEMA_READER_H
#include "Schema_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"

static int phraser_Folder_verify_table(flatcc_table_verifier_descriptor_t *td);
static int phraser_FoldersBlock_verify_table(flatcc_table_verifier_descriptor_t *td);
static int phraser_SymbolSet_verify_table(flatcc_table_verifier_descriptor_t *td);
static int phraser_SymbolSetsBlock_verify_table(flatcc_table_verifier_descriptor_t *td);
static int phraser_WordTemplate_verify_table(flatcc_table_verifier_descriptor_t *td);
static int phraser_WordTemplateRef_verify_table(flatcc_table_verifier_descriptor_t *td);
static int phraser_PhraseTemplate_verify_table(flatcc_table_verifier_descriptor_t *td);
static int phraser_PhraseTemplatesBlock_verify_table(flatcc_table_verifier_descriptor_t *td);
static int phraser_Word_verify_table(flatcc_table_verifier_descriptor_t *td);
static int phraser_PhraseHistory_verify_table(flatcc_table_verifier_descriptor_t *td);
static int phraser_PhraseBlock_verify_table(flatcc_table_verifier_descriptor_t *td);
static int phraser_KeyBlock_verify_table(flatcc_table_verifier_descriptor_t *td);

static inline int phraser_StoreBlock_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, phraser_StoreBlock_identifier, 12, 4);
}

static inline int phraser_StoreBlock_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, phraser_StoreBlock_identifier, 12, 4);
}

static inline int phraser_StoreBlock_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, phraser_StoreBlock_type_hash, 12, 4);
}

static inline int phraser_StoreBlock_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, phraser_StoreBlock_type_hash, 12, 4);
}

static inline int phraser_StoreBlock_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root(buf, bufsiz, thash, 12, 4);
}

static inline int phraser_StoreBlock_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_struct_as_typed_root_with_size(buf, bufsiz, thash, 12, 4);
}

static inline int phraser_StoreBlock_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root(buf, bufsiz, fid, 12, 4);
}

static inline int phraser_StoreBlock_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_struct_as_root_with_size(buf, bufsiz, fid, 12, 4);
}

static int phraser_Folder_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 2, 2) /* folder_id */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 2, 2) /* parent_folder_id */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* folder_name */)) return ret;
    return flatcc_verify_ok;
}

static inline int phraser_Folder_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_Folder_identifier, &phraser_Folder_verify_table);
}

static inline int phraser_Folder_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_Folder_identifier, &phraser_Folder_verify_table);
}

static inline int phraser_Folder_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_Folder_type_identifier, &phraser_Folder_verify_table);
}

static inline int phraser_Folder_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_Folder_type_identifier, &phraser_Folder_verify_table);
}

static inline int phraser_Folder_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &phraser_Folder_verify_table);
}

static inline int phraser_Folder_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &phraser_Folder_verify_table);
}

static inline int phraser_Folder_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &phraser_Folder_verify_table);
}

static inline int phraser_Folder_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &phraser_Folder_verify_table);
}

static int phraser_FoldersBlock_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 12, 4) /* block */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &phraser_Folder_verify_table) /* folders */)) return ret;
    return flatcc_verify_ok;
}

static inline int phraser_FoldersBlock_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_FoldersBlock_identifier, &phraser_FoldersBlock_verify_table);
}

static inline int phraser_FoldersBlock_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_FoldersBlock_identifier, &phraser_FoldersBlock_verify_table);
}

static inline int phraser_FoldersBlock_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_FoldersBlock_type_identifier, &phraser_FoldersBlock_verify_table);
}

static inline int phraser_FoldersBlock_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_FoldersBlock_type_identifier, &phraser_FoldersBlock_verify_table);
}

static inline int phraser_FoldersBlock_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &phraser_FoldersBlock_verify_table);
}

static inline int phraser_FoldersBlock_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &phraser_FoldersBlock_verify_table);
}

static inline int phraser_FoldersBlock_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &phraser_FoldersBlock_verify_table);
}

static inline int phraser_FoldersBlock_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &phraser_FoldersBlock_verify_table);
}

static int phraser_SymbolSet_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 2, 2) /* set_id */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* symbol_set_name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* symbol_set */)) return ret;
    return flatcc_verify_ok;
}

static inline int phraser_SymbolSet_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_SymbolSet_identifier, &phraser_SymbolSet_verify_table);
}

static inline int phraser_SymbolSet_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_SymbolSet_identifier, &phraser_SymbolSet_verify_table);
}

static inline int phraser_SymbolSet_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_SymbolSet_type_identifier, &phraser_SymbolSet_verify_table);
}

static inline int phraser_SymbolSet_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_SymbolSet_type_identifier, &phraser_SymbolSet_verify_table);
}

static inline int phraser_SymbolSet_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &phraser_SymbolSet_verify_table);
}

static inline int phraser_SymbolSet_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &phraser_SymbolSet_verify_table);
}

static inline int phraser_SymbolSet_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &phraser_SymbolSet_verify_table);
}

static inline int phraser_SymbolSet_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &phraser_SymbolSet_verify_table);
}

static int phraser_SymbolSetsBlock_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 12, 4) /* block */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &phraser_SymbolSet_verify_table) /* symbol_sets */)) return ret;
    return flatcc_verify_ok;
}

static inline int phraser_SymbolSetsBlock_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_SymbolSetsBlock_identifier, &phraser_SymbolSetsBlock_verify_table);
}

static inline int phraser_SymbolSetsBlock_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_SymbolSetsBlock_identifier, &phraser_SymbolSetsBlock_verify_table);
}

static inline int phraser_SymbolSetsBlock_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_SymbolSetsBlock_type_identifier, &phraser_SymbolSetsBlock_verify_table);
}

static inline int phraser_SymbolSetsBlock_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_SymbolSetsBlock_type_identifier, &phraser_SymbolSetsBlock_verify_table);
}

static inline int phraser_SymbolSetsBlock_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &phraser_SymbolSetsBlock_verify_table);
}

static inline int phraser_SymbolSetsBlock_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &phraser_SymbolSetsBlock_verify_table);
}

static inline int phraser_SymbolSetsBlock_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &phraser_SymbolSetsBlock_verify_table);
}

static inline int phraser_SymbolSetsBlock_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &phraser_SymbolSetsBlock_verify_table);
}

static int phraser_WordTemplate_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 2, 2) /* word_template_id */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* permissions */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 1, 1) /* icon */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 2, 2) /* min_length */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 2, 2) /* max_length */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 5, 0) /* word_template_name */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 6, 0, 2, 2, INT64_C(2147483647)) /* symbol_set_ids */)) return ret;
    return flatcc_verify_ok;
}

static inline int phraser_WordTemplate_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_WordTemplate_identifier, &phraser_WordTemplate_verify_table);
}

static inline int phraser_WordTemplate_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_WordTemplate_identifier, &phraser_WordTemplate_verify_table);
}

static inline int phraser_WordTemplate_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_WordTemplate_type_identifier, &phraser_WordTemplate_verify_table);
}

static inline int phraser_WordTemplate_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_WordTemplate_type_identifier, &phraser_WordTemplate_verify_table);
}

static inline int phraser_WordTemplate_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &phraser_WordTemplate_verify_table);
}

static inline int phraser_WordTemplate_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &phraser_WordTemplate_verify_table);
}

static inline int phraser_WordTemplate_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &phraser_WordTemplate_verify_table);
}

static inline int phraser_WordTemplate_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &phraser_WordTemplate_verify_table);
}

static int phraser_WordTemplateRef_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 2, 2) /* word_template_id */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* word_template_ordinal */)) return ret;
    return flatcc_verify_ok;
}

static inline int phraser_WordTemplateRef_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_WordTemplateRef_identifier, &phraser_WordTemplateRef_verify_table);
}

static inline int phraser_WordTemplateRef_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_WordTemplateRef_identifier, &phraser_WordTemplateRef_verify_table);
}

static inline int phraser_WordTemplateRef_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_WordTemplateRef_type_identifier, &phraser_WordTemplateRef_verify_table);
}

static inline int phraser_WordTemplateRef_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_WordTemplateRef_type_identifier, &phraser_WordTemplateRef_verify_table);
}

static inline int phraser_WordTemplateRef_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &phraser_WordTemplateRef_verify_table);
}

static inline int phraser_WordTemplateRef_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &phraser_WordTemplateRef_verify_table);
}

static inline int phraser_WordTemplateRef_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &phraser_WordTemplateRef_verify_table);
}

static inline int phraser_WordTemplateRef_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &phraser_WordTemplateRef_verify_table);
}

static int phraser_PhraseTemplate_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 2, 2) /* phrase_template_id */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 1, 0) /* phrase_template_name */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 2, 0, &phraser_WordTemplateRef_verify_table) /* word_template_refs */)) return ret;
    return flatcc_verify_ok;
}

static inline int phraser_PhraseTemplate_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_PhraseTemplate_identifier, &phraser_PhraseTemplate_verify_table);
}

static inline int phraser_PhraseTemplate_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_PhraseTemplate_identifier, &phraser_PhraseTemplate_verify_table);
}

static inline int phraser_PhraseTemplate_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_PhraseTemplate_type_identifier, &phraser_PhraseTemplate_verify_table);
}

static inline int phraser_PhraseTemplate_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_PhraseTemplate_type_identifier, &phraser_PhraseTemplate_verify_table);
}

static inline int phraser_PhraseTemplate_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &phraser_PhraseTemplate_verify_table);
}

static inline int phraser_PhraseTemplate_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &phraser_PhraseTemplate_verify_table);
}

static inline int phraser_PhraseTemplate_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &phraser_PhraseTemplate_verify_table);
}

static inline int phraser_PhraseTemplate_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &phraser_PhraseTemplate_verify_table);
}

static int phraser_PhraseTemplatesBlock_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 12, 4) /* block */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &phraser_PhraseTemplate_verify_table) /* phrase_templates */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 2, 0, &phraser_WordTemplate_verify_table) /* word_templates */)) return ret;
    return flatcc_verify_ok;
}

static inline int phraser_PhraseTemplatesBlock_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_PhraseTemplatesBlock_identifier, &phraser_PhraseTemplatesBlock_verify_table);
}

static inline int phraser_PhraseTemplatesBlock_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_PhraseTemplatesBlock_identifier, &phraser_PhraseTemplatesBlock_verify_table);
}

static inline int phraser_PhraseTemplatesBlock_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_PhraseTemplatesBlock_type_identifier, &phraser_PhraseTemplatesBlock_verify_table);
}

static inline int phraser_PhraseTemplatesBlock_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_PhraseTemplatesBlock_type_identifier, &phraser_PhraseTemplatesBlock_verify_table);
}

static inline int phraser_PhraseTemplatesBlock_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &phraser_PhraseTemplatesBlock_verify_table);
}

static inline int phraser_PhraseTemplatesBlock_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &phraser_PhraseTemplatesBlock_verify_table);
}

static inline int phraser_PhraseTemplatesBlock_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &phraser_PhraseTemplatesBlock_verify_table);
}

static inline int phraser_PhraseTemplatesBlock_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &phraser_PhraseTemplatesBlock_verify_table);
}

static int phraser_Word_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 2, 2) /* word_template_id */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 1, 1) /* word_template_ordinal */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 2, 0) /* name */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 3, 0) /* word */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 1, 1) /* permissions */)) return ret;
    if ((ret = flatcc_verify_field(td, 5, 1, 1) /* icon */)) return ret;
    return flatcc_verify_ok;
}

static inline int phraser_Word_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_Word_identifier, &phraser_Word_verify_table);
}

static inline int phraser_Word_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_Word_identifier, &phraser_Word_verify_table);
}

static inline int phraser_Word_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_Word_type_identifier, &phraser_Word_verify_table);
}

static inline int phraser_Word_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_Word_type_identifier, &phraser_Word_verify_table);
}

static inline int phraser_Word_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &phraser_Word_verify_table);
}

static inline int phraser_Word_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &phraser_Word_verify_table);
}

static inline int phraser_Word_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &phraser_Word_verify_table);
}

static inline int phraser_Word_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &phraser_Word_verify_table);
}

static int phraser_PhraseHistory_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 2, 2) /* phrase_template_id */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 1, 0, &phraser_Word_verify_table) /* phrase */)) return ret;
    return flatcc_verify_ok;
}

static inline int phraser_PhraseHistory_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_PhraseHistory_identifier, &phraser_PhraseHistory_verify_table);
}

static inline int phraser_PhraseHistory_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_PhraseHistory_identifier, &phraser_PhraseHistory_verify_table);
}

static inline int phraser_PhraseHistory_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_PhraseHistory_type_identifier, &phraser_PhraseHistory_verify_table);
}

static inline int phraser_PhraseHistory_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_PhraseHistory_type_identifier, &phraser_PhraseHistory_verify_table);
}

static inline int phraser_PhraseHistory_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &phraser_PhraseHistory_verify_table);
}

static inline int phraser_PhraseHistory_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &phraser_PhraseHistory_verify_table);
}

static inline int phraser_PhraseHistory_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &phraser_PhraseHistory_verify_table);
}

static inline int phraser_PhraseHistory_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &phraser_PhraseHistory_verify_table);
}

static int phraser_PhraseBlock_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 12, 4) /* block */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 2, 2) /* phrase_template_id */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 2, 2) /* folder_id */)) return ret;
    if ((ret = flatcc_verify_field(td, 3, 1, 1) /* is_tombstone */)) return ret;
    if ((ret = flatcc_verify_string_field(td, 4, 0) /* phrase_name */)) return ret;
    if ((ret = flatcc_verify_table_vector_field(td, 5, 0, &phraser_PhraseHistory_verify_table) /* history */)) return ret;
    return flatcc_verify_ok;
}

static inline int phraser_PhraseBlock_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_PhraseBlock_identifier, &phraser_PhraseBlock_verify_table);
}

static inline int phraser_PhraseBlock_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_PhraseBlock_identifier, &phraser_PhraseBlock_verify_table);
}

static inline int phraser_PhraseBlock_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_PhraseBlock_type_identifier, &phraser_PhraseBlock_verify_table);
}

static inline int phraser_PhraseBlock_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_PhraseBlock_type_identifier, &phraser_PhraseBlock_verify_table);
}

static inline int phraser_PhraseBlock_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &phraser_PhraseBlock_verify_table);
}

static inline int phraser_PhraseBlock_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &phraser_PhraseBlock_verify_table);
}

static inline int phraser_PhraseBlock_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &phraser_PhraseBlock_verify_table);
}

static inline int phraser_PhraseBlock_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &phraser_PhraseBlock_verify_table);
}

static int phraser_KeyBlock_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 12, 4) /* block */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 1, 0, 1, 1, INT64_C(4294967295)) /* key */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 2, 0, 1, 1, INT64_C(4294967295)) /* db_name */)) return ret;
    if ((ret = flatcc_verify_vector_field(td, 3, 0, 1, 1, INT64_C(4294967295)) /* iv */)) return ret;
    if ((ret = flatcc_verify_field(td, 4, 2, 2) /* block_count */)) return ret;
    return flatcc_verify_ok;
}

static inline int phraser_KeyBlock_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_KeyBlock_identifier, &phraser_KeyBlock_verify_table);
}

static inline int phraser_KeyBlock_verify_as_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_KeyBlock_identifier, &phraser_KeyBlock_verify_table);
}

static inline int phraser_KeyBlock_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, phraser_KeyBlock_type_identifier, &phraser_KeyBlock_verify_table);
}

static inline int phraser_KeyBlock_verify_as_typed_root_with_size(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, phraser_KeyBlock_type_identifier, &phraser_KeyBlock_verify_table);
}

static inline int phraser_KeyBlock_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &phraser_KeyBlock_verify_table);
}

static inline int phraser_KeyBlock_verify_as_root_with_identifier_and_size(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root_with_size(buf, bufsiz, fid, &phraser_KeyBlock_verify_table);
}

static inline int phraser_KeyBlock_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &phraser_KeyBlock_verify_table);
}

static inline int phraser_KeyBlock_verify_as_root_with_type_hash_and_size(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root_with_size(buf, bufsiz, thash, &phraser_KeyBlock_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* SCHEMA_VERIFIER_H */
