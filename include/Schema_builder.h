#ifndef SCHEMA_BUILDER_H
#define SCHEMA_BUILDER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#ifndef SCHEMA_READER_H
#include "Schema_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#define __phraser_BlockType_formal_args , phraser_BlockType_enum_t v0
#define __phraser_BlockType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, phraser_BlockType, phraser_BlockType_enum_t)
#define __phraser_Icon_formal_args , phraser_Icon_enum_t v0
#define __phraser_Icon_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, phraser_Icon, phraser_Icon_enum_t)

#define __phraser_StoreBlock_formal_args , uint16_t v0, uint32_t v1, uint32_t v2
#define __phraser_StoreBlock_call_args , v0, v1, v2
static inline phraser_StoreBlock_t *phraser_StoreBlock_assign(phraser_StoreBlock_t *p, uint16_t v0, uint32_t v1, uint32_t v2)
{ p->block_id = v0; p->version = v1; p->entropy = v2;
  return p; }
static inline phraser_StoreBlock_t *phraser_StoreBlock_copy(phraser_StoreBlock_t *p, const phraser_StoreBlock_t *p2)
{ p->block_id = p2->block_id; p->version = p2->version; p->entropy = p2->entropy;
  return p; }
static inline phraser_StoreBlock_t *phraser_StoreBlock_assign_to_pe(phraser_StoreBlock_t *p, uint16_t v0, uint32_t v1, uint32_t v2)
{ flatbuffers_uint16_assign_to_pe(&p->block_id, v0); flatbuffers_uint32_assign_to_pe(&p->version, v1); flatbuffers_uint32_assign_to_pe(&p->entropy, v2);
  return p; }
static inline phraser_StoreBlock_t *phraser_StoreBlock_copy_to_pe(phraser_StoreBlock_t *p, const phraser_StoreBlock_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->block_id, &p2->block_id); flatbuffers_uint32_copy_to_pe(&p->version, &p2->version); flatbuffers_uint32_copy_to_pe(&p->entropy, &p2->entropy);
  return p; }
static inline phraser_StoreBlock_t *phraser_StoreBlock_assign_from_pe(phraser_StoreBlock_t *p, uint16_t v0, uint32_t v1, uint32_t v2)
{ flatbuffers_uint16_assign_from_pe(&p->block_id, v0); flatbuffers_uint32_assign_from_pe(&p->version, v1); flatbuffers_uint32_assign_from_pe(&p->entropy, v2);
  return p; }
static inline phraser_StoreBlock_t *phraser_StoreBlock_copy_from_pe(phraser_StoreBlock_t *p, const phraser_StoreBlock_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->block_id, &p2->block_id); flatbuffers_uint32_copy_from_pe(&p->version, &p2->version); flatbuffers_uint32_copy_from_pe(&p->entropy, &p2->entropy);
  return p; }
__flatbuffers_build_struct(flatbuffers_, phraser_StoreBlock, 12, 4, phraser_StoreBlock_file_identifier, phraser_StoreBlock_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, phraser_StoreBlock, phraser_StoreBlock_t)

static const flatbuffers_voffset_t __phraser_Folder_required[] = { 0 };
typedef flatbuffers_ref_t phraser_Folder_ref_t;
static phraser_Folder_ref_t phraser_Folder_clone(flatbuffers_builder_t *B, phraser_Folder_table_t t);
__flatbuffers_build_table(flatbuffers_, phraser_Folder, 3)

static const flatbuffers_voffset_t __phraser_FoldersBlock_required[] = { 0 };
typedef flatbuffers_ref_t phraser_FoldersBlock_ref_t;
static phraser_FoldersBlock_ref_t phraser_FoldersBlock_clone(flatbuffers_builder_t *B, phraser_FoldersBlock_table_t t);
__flatbuffers_build_table(flatbuffers_, phraser_FoldersBlock, 2)

static const flatbuffers_voffset_t __phraser_SymbolSet_required[] = { 0 };
typedef flatbuffers_ref_t phraser_SymbolSet_ref_t;
static phraser_SymbolSet_ref_t phraser_SymbolSet_clone(flatbuffers_builder_t *B, phraser_SymbolSet_table_t t);
__flatbuffers_build_table(flatbuffers_, phraser_SymbolSet, 3)

static const flatbuffers_voffset_t __phraser_SymbolSetsBlock_required[] = { 0 };
typedef flatbuffers_ref_t phraser_SymbolSetsBlock_ref_t;
static phraser_SymbolSetsBlock_ref_t phraser_SymbolSetsBlock_clone(flatbuffers_builder_t *B, phraser_SymbolSetsBlock_table_t t);
__flatbuffers_build_table(flatbuffers_, phraser_SymbolSetsBlock, 2)

static const flatbuffers_voffset_t __phraser_WordTemplate_required[] = { 0 };
typedef flatbuffers_ref_t phraser_WordTemplate_ref_t;
static phraser_WordTemplate_ref_t phraser_WordTemplate_clone(flatbuffers_builder_t *B, phraser_WordTemplate_table_t t);
__flatbuffers_build_table(flatbuffers_, phraser_WordTemplate, 7)

static const flatbuffers_voffset_t __phraser_WordTemplateRef_required[] = { 0 };
typedef flatbuffers_ref_t phraser_WordTemplateRef_ref_t;
static phraser_WordTemplateRef_ref_t phraser_WordTemplateRef_clone(flatbuffers_builder_t *B, phraser_WordTemplateRef_table_t t);
__flatbuffers_build_table(flatbuffers_, phraser_WordTemplateRef, 2)

static const flatbuffers_voffset_t __phraser_PhraseTemplate_required[] = { 0 };
typedef flatbuffers_ref_t phraser_PhraseTemplate_ref_t;
static phraser_PhraseTemplate_ref_t phraser_PhraseTemplate_clone(flatbuffers_builder_t *B, phraser_PhraseTemplate_table_t t);
__flatbuffers_build_table(flatbuffers_, phraser_PhraseTemplate, 3)

static const flatbuffers_voffset_t __phraser_PhraseTemplatesBlock_required[] = { 0 };
typedef flatbuffers_ref_t phraser_PhraseTemplatesBlock_ref_t;
static phraser_PhraseTemplatesBlock_ref_t phraser_PhraseTemplatesBlock_clone(flatbuffers_builder_t *B, phraser_PhraseTemplatesBlock_table_t t);
__flatbuffers_build_table(flatbuffers_, phraser_PhraseTemplatesBlock, 3)

static const flatbuffers_voffset_t __phraser_Word_required[] = { 0 };
typedef flatbuffers_ref_t phraser_Word_ref_t;
static phraser_Word_ref_t phraser_Word_clone(flatbuffers_builder_t *B, phraser_Word_table_t t);
__flatbuffers_build_table(flatbuffers_, phraser_Word, 6)

static const flatbuffers_voffset_t __phraser_PhraseHistory_required[] = { 0 };
typedef flatbuffers_ref_t phraser_PhraseHistory_ref_t;
static phraser_PhraseHistory_ref_t phraser_PhraseHistory_clone(flatbuffers_builder_t *B, phraser_PhraseHistory_table_t t);
__flatbuffers_build_table(flatbuffers_, phraser_PhraseHistory, 2)

static const flatbuffers_voffset_t __phraser_PhraseBlock_required[] = { 0 };
typedef flatbuffers_ref_t phraser_PhraseBlock_ref_t;
static phraser_PhraseBlock_ref_t phraser_PhraseBlock_clone(flatbuffers_builder_t *B, phraser_PhraseBlock_table_t t);
__flatbuffers_build_table(flatbuffers_, phraser_PhraseBlock, 6)

static const flatbuffers_voffset_t __phraser_KeyBlock_required[] = { 0 };
typedef flatbuffers_ref_t phraser_KeyBlock_ref_t;
static phraser_KeyBlock_ref_t phraser_KeyBlock_clone(flatbuffers_builder_t *B, phraser_KeyBlock_table_t t);
__flatbuffers_build_table(flatbuffers_, phraser_KeyBlock, 5)

#define __phraser_Folder_formal_args , uint16_t v0, uint16_t v1, flatbuffers_string_ref_t v2
#define __phraser_Folder_call_args , v0, v1, v2
static inline phraser_Folder_ref_t phraser_Folder_create(flatbuffers_builder_t *B __phraser_Folder_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, phraser_Folder, phraser_Folder_file_identifier, phraser_Folder_type_identifier)

#define __phraser_FoldersBlock_formal_args , phraser_StoreBlock_t *v0, phraser_Folder_vec_ref_t v1
#define __phraser_FoldersBlock_call_args , v0, v1
static inline phraser_FoldersBlock_ref_t phraser_FoldersBlock_create(flatbuffers_builder_t *B __phraser_FoldersBlock_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, phraser_FoldersBlock, phraser_FoldersBlock_file_identifier, phraser_FoldersBlock_type_identifier)

#define __phraser_SymbolSet_formal_args , uint16_t v0, flatbuffers_string_ref_t v1, flatbuffers_string_ref_t v2
#define __phraser_SymbolSet_call_args , v0, v1, v2
static inline phraser_SymbolSet_ref_t phraser_SymbolSet_create(flatbuffers_builder_t *B __phraser_SymbolSet_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, phraser_SymbolSet, phraser_SymbolSet_file_identifier, phraser_SymbolSet_type_identifier)

#define __phraser_SymbolSetsBlock_formal_args , phraser_StoreBlock_t *v0, phraser_SymbolSet_vec_ref_t v1
#define __phraser_SymbolSetsBlock_call_args , v0, v1
static inline phraser_SymbolSetsBlock_ref_t phraser_SymbolSetsBlock_create(flatbuffers_builder_t *B __phraser_SymbolSetsBlock_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, phraser_SymbolSetsBlock, phraser_SymbolSetsBlock_file_identifier, phraser_SymbolSetsBlock_type_identifier)

#define __phraser_WordTemplate_formal_args ,\
  uint16_t v0, int8_t v1, phraser_Icon_enum_t v2, uint16_t v3,\
  uint16_t v4, flatbuffers_string_ref_t v5, flatbuffers_uint16_vec_ref_t v6
#define __phraser_WordTemplate_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6
static inline phraser_WordTemplate_ref_t phraser_WordTemplate_create(flatbuffers_builder_t *B __phraser_WordTemplate_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, phraser_WordTemplate, phraser_WordTemplate_file_identifier, phraser_WordTemplate_type_identifier)

#define __phraser_WordTemplateRef_formal_args , uint16_t v0, int8_t v1
#define __phraser_WordTemplateRef_call_args , v0, v1
static inline phraser_WordTemplateRef_ref_t phraser_WordTemplateRef_create(flatbuffers_builder_t *B __phraser_WordTemplateRef_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, phraser_WordTemplateRef, phraser_WordTemplateRef_file_identifier, phraser_WordTemplateRef_type_identifier)

#define __phraser_PhraseTemplate_formal_args , uint16_t v0, flatbuffers_string_ref_t v1, phraser_WordTemplateRef_vec_ref_t v2
#define __phraser_PhraseTemplate_call_args , v0, v1, v2
static inline phraser_PhraseTemplate_ref_t phraser_PhraseTemplate_create(flatbuffers_builder_t *B __phraser_PhraseTemplate_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, phraser_PhraseTemplate, phraser_PhraseTemplate_file_identifier, phraser_PhraseTemplate_type_identifier)

#define __phraser_PhraseTemplatesBlock_formal_args , phraser_StoreBlock_t *v0, phraser_PhraseTemplate_vec_ref_t v1, phraser_WordTemplate_vec_ref_t v2
#define __phraser_PhraseTemplatesBlock_call_args , v0, v1, v2
static inline phraser_PhraseTemplatesBlock_ref_t phraser_PhraseTemplatesBlock_create(flatbuffers_builder_t *B __phraser_PhraseTemplatesBlock_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, phraser_PhraseTemplatesBlock, phraser_PhraseTemplatesBlock_file_identifier, phraser_PhraseTemplatesBlock_type_identifier)

#define __phraser_Word_formal_args ,\
  uint16_t v0, int8_t v1, flatbuffers_string_ref_t v2, flatbuffers_string_ref_t v3, int8_t v4, phraser_Icon_enum_t v5
#define __phraser_Word_call_args ,\
  v0, v1, v2, v3, v4, v5
static inline phraser_Word_ref_t phraser_Word_create(flatbuffers_builder_t *B __phraser_Word_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, phraser_Word, phraser_Word_file_identifier, phraser_Word_type_identifier)

#define __phraser_PhraseHistory_formal_args , uint16_t v0, phraser_Word_vec_ref_t v1
#define __phraser_PhraseHistory_call_args , v0, v1
static inline phraser_PhraseHistory_ref_t phraser_PhraseHistory_create(flatbuffers_builder_t *B __phraser_PhraseHistory_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, phraser_PhraseHistory, phraser_PhraseHistory_file_identifier, phraser_PhraseHistory_type_identifier)

#define __phraser_PhraseBlock_formal_args ,\
  phraser_StoreBlock_t *v0, uint16_t v1, uint16_t v2, flatbuffers_bool_t v3, flatbuffers_string_ref_t v4, phraser_PhraseHistory_vec_ref_t v5
#define __phraser_PhraseBlock_call_args ,\
  v0, v1, v2, v3, v4, v5
static inline phraser_PhraseBlock_ref_t phraser_PhraseBlock_create(flatbuffers_builder_t *B __phraser_PhraseBlock_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, phraser_PhraseBlock, phraser_PhraseBlock_file_identifier, phraser_PhraseBlock_type_identifier)

#define __phraser_KeyBlock_formal_args ,\
  phraser_StoreBlock_t *v0, flatbuffers_int8_vec_ref_t v1, flatbuffers_int8_vec_ref_t v2, flatbuffers_int8_vec_ref_t v3, uint16_t v4
#define __phraser_KeyBlock_call_args ,\
  v0, v1, v2, v3, v4
static inline phraser_KeyBlock_ref_t phraser_KeyBlock_create(flatbuffers_builder_t *B __phraser_KeyBlock_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, phraser_KeyBlock, phraser_KeyBlock_file_identifier, phraser_KeyBlock_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, phraser_Folder_folder_id, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_Folder)
__flatbuffers_build_scalar_field(1, flatbuffers_, phraser_Folder_parent_folder_id, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_Folder)
__flatbuffers_build_string_field(2, flatbuffers_, phraser_Folder_folder_name, phraser_Folder)

static inline phraser_Folder_ref_t phraser_Folder_create(flatbuffers_builder_t *B __phraser_Folder_formal_args)
{
    if (phraser_Folder_start(B)
        || phraser_Folder_folder_name_add(B, v2)
        || phraser_Folder_folder_id_add(B, v0)
        || phraser_Folder_parent_folder_id_add(B, v1)) {
        return 0;
    }
    return phraser_Folder_end(B);
}

static phraser_Folder_ref_t phraser_Folder_clone(flatbuffers_builder_t *B, phraser_Folder_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (phraser_Folder_start(B)
        || phraser_Folder_folder_name_pick(B, t)
        || phraser_Folder_folder_id_pick(B, t)
        || phraser_Folder_parent_folder_id_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, phraser_Folder_end(B));
}

__flatbuffers_build_struct_field(0, flatbuffers_, phraser_FoldersBlock_block, phraser_StoreBlock, 12, 4, phraser_FoldersBlock)
__flatbuffers_build_table_vector_field(1, flatbuffers_, phraser_FoldersBlock_folders, phraser_Folder, phraser_FoldersBlock)

static inline phraser_FoldersBlock_ref_t phraser_FoldersBlock_create(flatbuffers_builder_t *B __phraser_FoldersBlock_formal_args)
{
    if (phraser_FoldersBlock_start(B)
        || phraser_FoldersBlock_block_add(B, v0)
        || phraser_FoldersBlock_folders_add(B, v1)) {
        return 0;
    }
    return phraser_FoldersBlock_end(B);
}

static phraser_FoldersBlock_ref_t phraser_FoldersBlock_clone(flatbuffers_builder_t *B, phraser_FoldersBlock_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (phraser_FoldersBlock_start(B)
        || phraser_FoldersBlock_block_pick(B, t)
        || phraser_FoldersBlock_folders_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, phraser_FoldersBlock_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, phraser_SymbolSet_set_id, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_SymbolSet)
__flatbuffers_build_string_field(1, flatbuffers_, phraser_SymbolSet_symbol_set_name, phraser_SymbolSet)
__flatbuffers_build_string_field(2, flatbuffers_, phraser_SymbolSet_symbol_set, phraser_SymbolSet)

static inline phraser_SymbolSet_ref_t phraser_SymbolSet_create(flatbuffers_builder_t *B __phraser_SymbolSet_formal_args)
{
    if (phraser_SymbolSet_start(B)
        || phraser_SymbolSet_symbol_set_name_add(B, v1)
        || phraser_SymbolSet_symbol_set_add(B, v2)
        || phraser_SymbolSet_set_id_add(B, v0)) {
        return 0;
    }
    return phraser_SymbolSet_end(B);
}

static phraser_SymbolSet_ref_t phraser_SymbolSet_clone(flatbuffers_builder_t *B, phraser_SymbolSet_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (phraser_SymbolSet_start(B)
        || phraser_SymbolSet_symbol_set_name_pick(B, t)
        || phraser_SymbolSet_symbol_set_pick(B, t)
        || phraser_SymbolSet_set_id_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, phraser_SymbolSet_end(B));
}

__flatbuffers_build_struct_field(0, flatbuffers_, phraser_SymbolSetsBlock_block, phraser_StoreBlock, 12, 4, phraser_SymbolSetsBlock)
__flatbuffers_build_table_vector_field(1, flatbuffers_, phraser_SymbolSetsBlock_symbol_sets, phraser_SymbolSet, phraser_SymbolSetsBlock)

static inline phraser_SymbolSetsBlock_ref_t phraser_SymbolSetsBlock_create(flatbuffers_builder_t *B __phraser_SymbolSetsBlock_formal_args)
{
    if (phraser_SymbolSetsBlock_start(B)
        || phraser_SymbolSetsBlock_block_add(B, v0)
        || phraser_SymbolSetsBlock_symbol_sets_add(B, v1)) {
        return 0;
    }
    return phraser_SymbolSetsBlock_end(B);
}

static phraser_SymbolSetsBlock_ref_t phraser_SymbolSetsBlock_clone(flatbuffers_builder_t *B, phraser_SymbolSetsBlock_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (phraser_SymbolSetsBlock_start(B)
        || phraser_SymbolSetsBlock_block_pick(B, t)
        || phraser_SymbolSetsBlock_symbol_sets_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, phraser_SymbolSetsBlock_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, phraser_WordTemplate_word_template_id, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_WordTemplate)
__flatbuffers_build_scalar_field(1, flatbuffers_, phraser_WordTemplate_permissions, flatbuffers_int8, int8_t, 1, 1, INT8_C(0), phraser_WordTemplate)
__flatbuffers_build_scalar_field(2, flatbuffers_, phraser_WordTemplate_icon, phraser_Icon, phraser_Icon_enum_t, 1, 1, INT8_C(0), phraser_WordTemplate)
__flatbuffers_build_scalar_field(3, flatbuffers_, phraser_WordTemplate_min_length, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_WordTemplate)
__flatbuffers_build_scalar_field(4, flatbuffers_, phraser_WordTemplate_max_length, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_WordTemplate)
__flatbuffers_build_string_field(5, flatbuffers_, phraser_WordTemplate_word_template_name, phraser_WordTemplate)
__flatbuffers_build_vector_field(6, flatbuffers_, phraser_WordTemplate_symbol_set_ids, flatbuffers_uint16, uint16_t, phraser_WordTemplate)

static inline phraser_WordTemplate_ref_t phraser_WordTemplate_create(flatbuffers_builder_t *B __phraser_WordTemplate_formal_args)
{
    if (phraser_WordTemplate_start(B)
        || phraser_WordTemplate_word_template_name_add(B, v5)
        || phraser_WordTemplate_symbol_set_ids_add(B, v6)
        || phraser_WordTemplate_word_template_id_add(B, v0)
        || phraser_WordTemplate_min_length_add(B, v3)
        || phraser_WordTemplate_max_length_add(B, v4)
        || phraser_WordTemplate_permissions_add(B, v1)
        || phraser_WordTemplate_icon_add(B, v2)) {
        return 0;
    }
    return phraser_WordTemplate_end(B);
}

static phraser_WordTemplate_ref_t phraser_WordTemplate_clone(flatbuffers_builder_t *B, phraser_WordTemplate_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (phraser_WordTemplate_start(B)
        || phraser_WordTemplate_word_template_name_pick(B, t)
        || phraser_WordTemplate_symbol_set_ids_pick(B, t)
        || phraser_WordTemplate_word_template_id_pick(B, t)
        || phraser_WordTemplate_min_length_pick(B, t)
        || phraser_WordTemplate_max_length_pick(B, t)
        || phraser_WordTemplate_permissions_pick(B, t)
        || phraser_WordTemplate_icon_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, phraser_WordTemplate_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, phraser_WordTemplateRef_word_template_id, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_WordTemplateRef)
__flatbuffers_build_scalar_field(1, flatbuffers_, phraser_WordTemplateRef_word_template_ordinal, flatbuffers_int8, int8_t, 1, 1, INT8_C(0), phraser_WordTemplateRef)

static inline phraser_WordTemplateRef_ref_t phraser_WordTemplateRef_create(flatbuffers_builder_t *B __phraser_WordTemplateRef_formal_args)
{
    if (phraser_WordTemplateRef_start(B)
        || phraser_WordTemplateRef_word_template_id_add(B, v0)
        || phraser_WordTemplateRef_word_template_ordinal_add(B, v1)) {
        return 0;
    }
    return phraser_WordTemplateRef_end(B);
}

static phraser_WordTemplateRef_ref_t phraser_WordTemplateRef_clone(flatbuffers_builder_t *B, phraser_WordTemplateRef_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (phraser_WordTemplateRef_start(B)
        || phraser_WordTemplateRef_word_template_id_pick(B, t)
        || phraser_WordTemplateRef_word_template_ordinal_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, phraser_WordTemplateRef_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, phraser_PhraseTemplate_phrase_template_id, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_PhraseTemplate)
__flatbuffers_build_string_field(1, flatbuffers_, phraser_PhraseTemplate_phrase_template_name, phraser_PhraseTemplate)
__flatbuffers_build_table_vector_field(2, flatbuffers_, phraser_PhraseTemplate_word_template_refs, phraser_WordTemplateRef, phraser_PhraseTemplate)

static inline phraser_PhraseTemplate_ref_t phraser_PhraseTemplate_create(flatbuffers_builder_t *B __phraser_PhraseTemplate_formal_args)
{
    if (phraser_PhraseTemplate_start(B)
        || phraser_PhraseTemplate_phrase_template_name_add(B, v1)
        || phraser_PhraseTemplate_word_template_refs_add(B, v2)
        || phraser_PhraseTemplate_phrase_template_id_add(B, v0)) {
        return 0;
    }
    return phraser_PhraseTemplate_end(B);
}

static phraser_PhraseTemplate_ref_t phraser_PhraseTemplate_clone(flatbuffers_builder_t *B, phraser_PhraseTemplate_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (phraser_PhraseTemplate_start(B)
        || phraser_PhraseTemplate_phrase_template_name_pick(B, t)
        || phraser_PhraseTemplate_word_template_refs_pick(B, t)
        || phraser_PhraseTemplate_phrase_template_id_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, phraser_PhraseTemplate_end(B));
}

__flatbuffers_build_struct_field(0, flatbuffers_, phraser_PhraseTemplatesBlock_block, phraser_StoreBlock, 12, 4, phraser_PhraseTemplatesBlock)
__flatbuffers_build_table_vector_field(1, flatbuffers_, phraser_PhraseTemplatesBlock_phrase_templates, phraser_PhraseTemplate, phraser_PhraseTemplatesBlock)
__flatbuffers_build_table_vector_field(2, flatbuffers_, phraser_PhraseTemplatesBlock_word_templates, phraser_WordTemplate, phraser_PhraseTemplatesBlock)

static inline phraser_PhraseTemplatesBlock_ref_t phraser_PhraseTemplatesBlock_create(flatbuffers_builder_t *B __phraser_PhraseTemplatesBlock_formal_args)
{
    if (phraser_PhraseTemplatesBlock_start(B)
        || phraser_PhraseTemplatesBlock_block_add(B, v0)
        || phraser_PhraseTemplatesBlock_phrase_templates_add(B, v1)
        || phraser_PhraseTemplatesBlock_word_templates_add(B, v2)) {
        return 0;
    }
    return phraser_PhraseTemplatesBlock_end(B);
}

static phraser_PhraseTemplatesBlock_ref_t phraser_PhraseTemplatesBlock_clone(flatbuffers_builder_t *B, phraser_PhraseTemplatesBlock_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (phraser_PhraseTemplatesBlock_start(B)
        || phraser_PhraseTemplatesBlock_block_pick(B, t)
        || phraser_PhraseTemplatesBlock_phrase_templates_pick(B, t)
        || phraser_PhraseTemplatesBlock_word_templates_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, phraser_PhraseTemplatesBlock_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, phraser_Word_word_template_id, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_Word)
__flatbuffers_build_scalar_field(1, flatbuffers_, phraser_Word_word_template_ordinal, flatbuffers_int8, int8_t, 1, 1, INT8_C(0), phraser_Word)
__flatbuffers_build_string_field(2, flatbuffers_, phraser_Word_name, phraser_Word)
__flatbuffers_build_string_field(3, flatbuffers_, phraser_Word_word, phraser_Word)
__flatbuffers_build_scalar_field(4, flatbuffers_, phraser_Word_permissions, flatbuffers_int8, int8_t, 1, 1, INT8_C(0), phraser_Word)
__flatbuffers_build_scalar_field(5, flatbuffers_, phraser_Word_icon, phraser_Icon, phraser_Icon_enum_t, 1, 1, INT8_C(0), phraser_Word)

static inline phraser_Word_ref_t phraser_Word_create(flatbuffers_builder_t *B __phraser_Word_formal_args)
{
    if (phraser_Word_start(B)
        || phraser_Word_name_add(B, v2)
        || phraser_Word_word_add(B, v3)
        || phraser_Word_word_template_id_add(B, v0)
        || phraser_Word_word_template_ordinal_add(B, v1)
        || phraser_Word_permissions_add(B, v4)
        || phraser_Word_icon_add(B, v5)) {
        return 0;
    }
    return phraser_Word_end(B);
}

static phraser_Word_ref_t phraser_Word_clone(flatbuffers_builder_t *B, phraser_Word_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (phraser_Word_start(B)
        || phraser_Word_name_pick(B, t)
        || phraser_Word_word_pick(B, t)
        || phraser_Word_word_template_id_pick(B, t)
        || phraser_Word_word_template_ordinal_pick(B, t)
        || phraser_Word_permissions_pick(B, t)
        || phraser_Word_icon_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, phraser_Word_end(B));
}

__flatbuffers_build_scalar_field(0, flatbuffers_, phraser_PhraseHistory_phrase_template_id, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_PhraseHistory)
__flatbuffers_build_table_vector_field(1, flatbuffers_, phraser_PhraseHistory_phrase, phraser_Word, phraser_PhraseHistory)

static inline phraser_PhraseHistory_ref_t phraser_PhraseHistory_create(flatbuffers_builder_t *B __phraser_PhraseHistory_formal_args)
{
    if (phraser_PhraseHistory_start(B)
        || phraser_PhraseHistory_phrase_add(B, v1)
        || phraser_PhraseHistory_phrase_template_id_add(B, v0)) {
        return 0;
    }
    return phraser_PhraseHistory_end(B);
}

static phraser_PhraseHistory_ref_t phraser_PhraseHistory_clone(flatbuffers_builder_t *B, phraser_PhraseHistory_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (phraser_PhraseHistory_start(B)
        || phraser_PhraseHistory_phrase_pick(B, t)
        || phraser_PhraseHistory_phrase_template_id_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, phraser_PhraseHistory_end(B));
}

__flatbuffers_build_struct_field(0, flatbuffers_, phraser_PhraseBlock_block, phraser_StoreBlock, 12, 4, phraser_PhraseBlock)
__flatbuffers_build_scalar_field(1, flatbuffers_, phraser_PhraseBlock_phrase_template_id, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_PhraseBlock)
__flatbuffers_build_scalar_field(2, flatbuffers_, phraser_PhraseBlock_folder_id, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_PhraseBlock)
__flatbuffers_build_scalar_field(3, flatbuffers_, phraser_PhraseBlock_is_tombstone, flatbuffers_bool, flatbuffers_bool_t, 1, 1, UINT8_C(0), phraser_PhraseBlock)
__flatbuffers_build_string_field(4, flatbuffers_, phraser_PhraseBlock_phrase_name, phraser_PhraseBlock)
__flatbuffers_build_table_vector_field(5, flatbuffers_, phraser_PhraseBlock_history, phraser_PhraseHistory, phraser_PhraseBlock)

static inline phraser_PhraseBlock_ref_t phraser_PhraseBlock_create(flatbuffers_builder_t *B __phraser_PhraseBlock_formal_args)
{
    if (phraser_PhraseBlock_start(B)
        || phraser_PhraseBlock_block_add(B, v0)
        || phraser_PhraseBlock_phrase_name_add(B, v4)
        || phraser_PhraseBlock_history_add(B, v5)
        || phraser_PhraseBlock_phrase_template_id_add(B, v1)
        || phraser_PhraseBlock_folder_id_add(B, v2)
        || phraser_PhraseBlock_is_tombstone_add(B, v3)) {
        return 0;
    }
    return phraser_PhraseBlock_end(B);
}

static phraser_PhraseBlock_ref_t phraser_PhraseBlock_clone(flatbuffers_builder_t *B, phraser_PhraseBlock_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (phraser_PhraseBlock_start(B)
        || phraser_PhraseBlock_block_pick(B, t)
        || phraser_PhraseBlock_phrase_name_pick(B, t)
        || phraser_PhraseBlock_history_pick(B, t)
        || phraser_PhraseBlock_phrase_template_id_pick(B, t)
        || phraser_PhraseBlock_folder_id_pick(B, t)
        || phraser_PhraseBlock_is_tombstone_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, phraser_PhraseBlock_end(B));
}

__flatbuffers_build_struct_field(0, flatbuffers_, phraser_KeyBlock_block, phraser_StoreBlock, 12, 4, phraser_KeyBlock)
__flatbuffers_build_vector_field(1, flatbuffers_, phraser_KeyBlock_key, flatbuffers_int8, int8_t, phraser_KeyBlock)
__flatbuffers_build_vector_field(2, flatbuffers_, phraser_KeyBlock_db_name, flatbuffers_int8, int8_t, phraser_KeyBlock)
__flatbuffers_build_vector_field(3, flatbuffers_, phraser_KeyBlock_iv, flatbuffers_int8, int8_t, phraser_KeyBlock)
__flatbuffers_build_scalar_field(4, flatbuffers_, phraser_KeyBlock_block_count, flatbuffers_uint16, uint16_t, 2, 2, UINT16_C(0), phraser_KeyBlock)

static inline phraser_KeyBlock_ref_t phraser_KeyBlock_create(flatbuffers_builder_t *B __phraser_KeyBlock_formal_args)
{
    if (phraser_KeyBlock_start(B)
        || phraser_KeyBlock_block_add(B, v0)
        || phraser_KeyBlock_key_add(B, v1)
        || phraser_KeyBlock_db_name_add(B, v2)
        || phraser_KeyBlock_iv_add(B, v3)
        || phraser_KeyBlock_block_count_add(B, v4)) {
        return 0;
    }
    return phraser_KeyBlock_end(B);
}

static phraser_KeyBlock_ref_t phraser_KeyBlock_clone(flatbuffers_builder_t *B, phraser_KeyBlock_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (phraser_KeyBlock_start(B)
        || phraser_KeyBlock_block_pick(B, t)
        || phraser_KeyBlock_key_pick(B, t)
        || phraser_KeyBlock_db_name_pick(B, t)
        || phraser_KeyBlock_iv_pick(B, t)
        || phraser_KeyBlock_block_count_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, phraser_KeyBlock_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* SCHEMA_BUILDER_H */
