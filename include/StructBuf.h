//This file was generated by StructBuf.

#pragma once

#include "Arduino.h"
#include "StreamUtils.h"

typedef struct {
    uint32_t blockId;
    uint32_t version;
    uint8_t type;
} StoreBlock;

typedef struct {
    StoreBlock block;
    uint32_t index;
} RegStoreBlockAndIndex;

typedef struct {
    uint8_t folderId;
    uint8_t parentFolderId;
    uint8_t folderNameLength;
    uint8_t* folderName;
} Folder;

typedef struct {
    StoreBlock block;
    uint8_t foldersLength;
    Folder* folders;
} FoldersBlock;

typedef struct {
    uint8_t setId;
    uint8_t symbolSetNameLength;
    uint8_t* symbolSetName;
    uint8_t symbolSetLength;
    uint8_t* symbolSet;
} SymbolSet;

typedef struct {
    StoreBlock block;
    uint8_t symbolSetsLength;
    SymbolSet* symbolSets;
} SymbolSetsBlock;

typedef struct {
    uint8_t wordId;
    uint8_t flags;
    uint8_t icon;
    uint16_t minLength;
    uint16_t maxLength;
    uint8_t wordNameLength;
    uint8_t* wordName;
    uint8_t symbolSetIdsLength;
    uint8_t* symbolSetIds;
} Word;

typedef struct {
    uint8_t templateId;
    uint8_t templateNameLength;
    uint8_t* templateName;
    uint8_t wordsLength;
    Word* words;
} PhraseTemplate;

typedef struct {
    StoreBlock block;
    uint8_t phraseTemplatesLength;
    PhraseTemplate* phraseTemplates;
} PhraseTemplatesBlock;

typedef struct {
    uint8_t wordId;
    uint32_t wordValueLength;
    uint8_t* wordValue;
} StoreWordValue;

typedef struct {
    uint8_t wordValuesLength;
    StoreWordValue* wordValues;
} StorePhraseHistory;

typedef struct {
    StoreBlock block;
    uint8_t phraseTemplateId;
    uint8_t folderId;
    uint8_t phraseNameLength;
    uint8_t* phraseName;
    uint8_t historyLength;
    StorePhraseHistory* history;
} PhraseBlock;

typedef struct {
    StoreBlock block;
    uint8_t keyLength;
    uint8_t* key;
    uint8_t ivLength;
    uint8_t* iv;
} KeyBlock;


typedef struct {
    void* blockId;
    void* version;
    void* type;
} StoreBlockAccessor;

typedef struct {
    void* block;
    void* index;
} RegStoreBlockAndIndexAccessor;

typedef struct {
    void* folderId;
    void* parentFolderId;
    void* folderName;
} FolderAccessor;

typedef struct {
    void* block;
    void* folders;
} FoldersBlockAccessor;

typedef struct {
    void* setId;
    void* symbolSetName;
    void* symbolSet;
} SymbolSetAccessor;

typedef struct {
    void* block;
    void* symbolSets;
} SymbolSetsBlockAccessor;

typedef struct {
    void* wordId;
    void* flags;
    void* icon;
    void* minLength;
    void* maxLength;
    void* wordName;
    void* symbolSetIds;
} WordAccessor;

typedef struct {
    void* templateId;
    void* templateName;
    void* words;
} PhraseTemplateAccessor;

typedef struct {
    void* block;
    void* phraseTemplates;
} PhraseTemplatesBlockAccessor;

typedef struct {
    void* wordId;
    void* wordValue;
} StoreWordValueAccessor;

typedef struct {
    void* wordValues;
} StorePhraseHistoryAccessor;

typedef struct {
    void* block;
    void* phraseTemplateId;
    void* folderId;
    void* phraseName;
    void* history;
} PhraseBlockAccessor;

typedef struct {
    void* block;
    void* key;
    void* iv;
} KeyBlockAccessor;


StoreBlock sb_createStoreBlock(uint32_t blockId, uint32_t version, uint8_t type);
void sb_saveStoreBlock(void** cursor, StoreBlock* _StoreBlock);
StoreBlock* sb_readStoreBlock(void** cursor);
uint8_t sb_initStoreBlock(void** cursor, StoreBlock* _StoreBlock);
void sb_cleanStoreBlock(StoreBlock* _StoreBlock);
void sb_deleteStoreBlock(StoreBlock* _StoreBlock);
uint32_t sb_getStructSizeStoreBlock(StoreBlock* _StoreBlock);
uint8_t sb_isValidBufferSizeStoreBlock(void** cursor, uint32_t bufferSize);

uint8_t sb_initStoreBlock_Accessor(void** cursor, StoreBlockAccessor* accessor);

uint32_t* sb_getStoreBlock_blockId_Pointer(StoreBlockAccessor* accessor);
uint32_t* sb_getStoreBlock_version_Pointer(StoreBlockAccessor* accessor);
uint8_t* sb_getStoreBlock_type_Pointer(StoreBlockAccessor* accessor);

StoreBlock sb_cloneStoreBlock(StoreBlock* __StoreBlock);

RegStoreBlockAndIndex sb_createRegStoreBlockAndIndex(StoreBlock block, uint32_t index);
void sb_saveRegStoreBlockAndIndex(void** cursor, RegStoreBlockAndIndex* _RegStoreBlockAndIndex);
RegStoreBlockAndIndex* sb_readRegStoreBlockAndIndex(void** cursor);
uint8_t sb_initRegStoreBlockAndIndex(void** cursor, RegStoreBlockAndIndex* _RegStoreBlockAndIndex);
void sb_cleanRegStoreBlockAndIndex(RegStoreBlockAndIndex* _RegStoreBlockAndIndex);
void sb_deleteRegStoreBlockAndIndex(RegStoreBlockAndIndex* _RegStoreBlockAndIndex);
uint32_t sb_getStructSizeRegStoreBlockAndIndex(RegStoreBlockAndIndex* _RegStoreBlockAndIndex);
uint8_t sb_isValidBufferSizeRegStoreBlockAndIndex(void** cursor, uint32_t bufferSize);

uint8_t sb_initRegStoreBlockAndIndex_Accessor(void** cursor, RegStoreBlockAndIndexAccessor* accessor);

uint8_t sb_initRegStoreBlockAndIndex_block_Accessor(RegStoreBlockAndIndexAccessor* parentAccessor, StoreBlockAccessor* accessorToInit);
uint32_t* sb_getRegStoreBlockAndIndex_index_Pointer(RegStoreBlockAndIndexAccessor* accessor);

RegStoreBlockAndIndex sb_cloneRegStoreBlockAndIndex(RegStoreBlockAndIndex* __RegStoreBlockAndIndex);

Folder sb_createFolder(uint8_t folderId, uint8_t parentFolderId, uint8_t folderNameLength, uint8_t* folderName);
void sb_saveFolder(void** cursor, Folder* _Folder);
Folder* sb_readFolder(void** cursor);
uint8_t sb_initFolder(void** cursor, Folder* _Folder);
void sb_cleanFolder(Folder* _Folder);
void sb_deleteFolder(Folder* _Folder);
uint32_t sb_getStructSizeFolder(Folder* _Folder);
uint8_t sb_isValidBufferSizeFolder(void** cursor, uint32_t bufferSize);

uint8_t sb_initFolder_Accessor(void** cursor, FolderAccessor* accessor);

uint8_t* sb_getFolder_folderId_Pointer(FolderAccessor* accessor);
uint8_t* sb_getFolder_parentFolderId_Pointer(FolderAccessor* accessor);
uint8_t sb_getFolder_folderName_ArrayLength(FolderAccessor* accessor);
uint8_t* sb_getFolder_folderName_ArrayPointer(FolderAccessor* accessor);

Folder sb_cloneFolder(Folder* __Folder);

FoldersBlock sb_createFoldersBlock(StoreBlock block, uint8_t foldersLength, Folder* folders);
void sb_saveFoldersBlock(void** cursor, FoldersBlock* _FoldersBlock);
FoldersBlock* sb_readFoldersBlock(void** cursor);
uint8_t sb_initFoldersBlock(void** cursor, FoldersBlock* _FoldersBlock);
void sb_cleanFoldersBlock(FoldersBlock* _FoldersBlock);
void sb_deleteFoldersBlock(FoldersBlock* _FoldersBlock);
uint32_t sb_getStructSizeFoldersBlock(FoldersBlock* _FoldersBlock);
uint8_t sb_isValidBufferSizeFoldersBlock(void** cursor, uint32_t bufferSize);

uint8_t sb_initFoldersBlock_Accessor(void** cursor, FoldersBlockAccessor* accessor);

uint8_t sb_initFoldersBlock_block_Accessor(FoldersBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit);
uint8_t sb_getFoldersBlock_folders_ArrayLength(FoldersBlockAccessor* accessor);
uint8_t sb_initFoldersBlock_folders_AccessorArray(FoldersBlockAccessor* parentAccessor, FolderAccessor* accessorArrayToInit, uint8_t length);

FoldersBlock sb_cloneFoldersBlock(FoldersBlock* __FoldersBlock);

SymbolSet sb_createSymbolSet(uint8_t setId, uint8_t symbolSetNameLength, uint8_t* symbolSetName, uint8_t symbolSetLength, uint8_t* symbolSet);
void sb_saveSymbolSet(void** cursor, SymbolSet* _SymbolSet);
SymbolSet* sb_readSymbolSet(void** cursor);
uint8_t sb_initSymbolSet(void** cursor, SymbolSet* _SymbolSet);
void sb_cleanSymbolSet(SymbolSet* _SymbolSet);
void sb_deleteSymbolSet(SymbolSet* _SymbolSet);
uint32_t sb_getStructSizeSymbolSet(SymbolSet* _SymbolSet);
uint8_t sb_isValidBufferSizeSymbolSet(void** cursor, uint32_t bufferSize);

uint8_t sb_initSymbolSet_Accessor(void** cursor, SymbolSetAccessor* accessor);

uint8_t* sb_getSymbolSet_setId_Pointer(SymbolSetAccessor* accessor);
uint8_t sb_getSymbolSet_symbolSetName_ArrayLength(SymbolSetAccessor* accessor);
uint8_t* sb_getSymbolSet_symbolSetName_ArrayPointer(SymbolSetAccessor* accessor);
uint8_t sb_getSymbolSet_symbolSet_ArrayLength(SymbolSetAccessor* accessor);
uint8_t* sb_getSymbolSet_symbolSet_ArrayPointer(SymbolSetAccessor* accessor);

SymbolSet sb_cloneSymbolSet(SymbolSet* __SymbolSet);

SymbolSetsBlock sb_createSymbolSetsBlock(StoreBlock block, uint8_t symbolSetsLength, SymbolSet* symbolSets);
void sb_saveSymbolSetsBlock(void** cursor, SymbolSetsBlock* _SymbolSetsBlock);
SymbolSetsBlock* sb_readSymbolSetsBlock(void** cursor);
uint8_t sb_initSymbolSetsBlock(void** cursor, SymbolSetsBlock* _SymbolSetsBlock);
void sb_cleanSymbolSetsBlock(SymbolSetsBlock* _SymbolSetsBlock);
void sb_deleteSymbolSetsBlock(SymbolSetsBlock* _SymbolSetsBlock);
uint32_t sb_getStructSizeSymbolSetsBlock(SymbolSetsBlock* _SymbolSetsBlock);
uint8_t sb_isValidBufferSizeSymbolSetsBlock(void** cursor, uint32_t bufferSize);

uint8_t sb_initSymbolSetsBlock_Accessor(void** cursor, SymbolSetsBlockAccessor* accessor);

uint8_t sb_initSymbolSetsBlock_block_Accessor(SymbolSetsBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit);
uint8_t sb_getSymbolSetsBlock_symbolSets_ArrayLength(SymbolSetsBlockAccessor* accessor);
uint8_t sb_initSymbolSetsBlock_symbolSets_AccessorArray(SymbolSetsBlockAccessor* parentAccessor, SymbolSetAccessor* accessorArrayToInit, uint8_t length);

SymbolSetsBlock sb_cloneSymbolSetsBlock(SymbolSetsBlock* __SymbolSetsBlock);

Word sb_createWord(uint8_t wordId, uint8_t flags, uint8_t icon, uint16_t minLength, uint16_t maxLength, uint8_t wordNameLength, uint8_t* wordName, uint8_t symbolSetIdsLength, uint8_t* symbolSetIds);
void sb_saveWord(void** cursor, Word* _Word);
Word* sb_readWord(void** cursor);
uint8_t sb_initWord(void** cursor, Word* _Word);
void sb_cleanWord(Word* _Word);
void sb_deleteWord(Word* _Word);
uint32_t sb_getStructSizeWord(Word* _Word);
uint8_t sb_isValidBufferSizeWord(void** cursor, uint32_t bufferSize);

uint8_t sb_initWord_Accessor(void** cursor, WordAccessor* accessor);

uint8_t* sb_getWord_wordId_Pointer(WordAccessor* accessor);
uint8_t* sb_getWord_flags_Pointer(WordAccessor* accessor);
uint8_t* sb_getWord_icon_Pointer(WordAccessor* accessor);
uint16_t* sb_getWord_minLength_Pointer(WordAccessor* accessor);
uint16_t* sb_getWord_maxLength_Pointer(WordAccessor* accessor);
uint8_t sb_getWord_wordName_ArrayLength(WordAccessor* accessor);
uint8_t* sb_getWord_wordName_ArrayPointer(WordAccessor* accessor);
uint8_t sb_getWord_symbolSetIds_ArrayLength(WordAccessor* accessor);
uint8_t* sb_getWord_symbolSetIds_ArrayPointer(WordAccessor* accessor);

Word sb_cloneWord(Word* __Word);

PhraseTemplate sb_createPhraseTemplate(uint8_t templateId, uint8_t templateNameLength, uint8_t* templateName, uint8_t wordsLength, Word* words);
void sb_savePhraseTemplate(void** cursor, PhraseTemplate* _PhraseTemplate);
PhraseTemplate* sb_readPhraseTemplate(void** cursor);
uint8_t sb_initPhraseTemplate(void** cursor, PhraseTemplate* _PhraseTemplate);
void sb_cleanPhraseTemplate(PhraseTemplate* _PhraseTemplate);
void sb_deletePhraseTemplate(PhraseTemplate* _PhraseTemplate);
uint32_t sb_getStructSizePhraseTemplate(PhraseTemplate* _PhraseTemplate);
uint8_t sb_isValidBufferSizePhraseTemplate(void** cursor, uint32_t bufferSize);

uint8_t sb_initPhraseTemplate_Accessor(void** cursor, PhraseTemplateAccessor* accessor);

uint8_t* sb_getPhraseTemplate_templateId_Pointer(PhraseTemplateAccessor* accessor);
uint8_t sb_getPhraseTemplate_templateName_ArrayLength(PhraseTemplateAccessor* accessor);
uint8_t* sb_getPhraseTemplate_templateName_ArrayPointer(PhraseTemplateAccessor* accessor);
uint8_t sb_getPhraseTemplate_words_ArrayLength(PhraseTemplateAccessor* accessor);
uint8_t sb_initPhraseTemplate_words_AccessorArray(PhraseTemplateAccessor* parentAccessor, WordAccessor* accessorArrayToInit, uint8_t length);

PhraseTemplate sb_clonePhraseTemplate(PhraseTemplate* __PhraseTemplate);

PhraseTemplatesBlock sb_createPhraseTemplatesBlock(StoreBlock block, uint8_t phraseTemplatesLength, PhraseTemplate* phraseTemplates);
void sb_savePhraseTemplatesBlock(void** cursor, PhraseTemplatesBlock* _PhraseTemplatesBlock);
PhraseTemplatesBlock* sb_readPhraseTemplatesBlock(void** cursor);
uint8_t sb_initPhraseTemplatesBlock(void** cursor, PhraseTemplatesBlock* _PhraseTemplatesBlock);
void sb_cleanPhraseTemplatesBlock(PhraseTemplatesBlock* _PhraseTemplatesBlock);
void sb_deletePhraseTemplatesBlock(PhraseTemplatesBlock* _PhraseTemplatesBlock);
uint32_t sb_getStructSizePhraseTemplatesBlock(PhraseTemplatesBlock* _PhraseTemplatesBlock);
uint8_t sb_isValidBufferSizePhraseTemplatesBlock(void** cursor, uint32_t bufferSize);

uint8_t sb_initPhraseTemplatesBlock_Accessor(void** cursor, PhraseTemplatesBlockAccessor* accessor);

uint8_t sb_initPhraseTemplatesBlock_block_Accessor(PhraseTemplatesBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit);
uint8_t sb_getPhraseTemplatesBlock_phraseTemplates_ArrayLength(PhraseTemplatesBlockAccessor* accessor);
uint8_t sb_initPhraseTemplatesBlock_phraseTemplates_AccessorArray(PhraseTemplatesBlockAccessor* parentAccessor, PhraseTemplateAccessor* accessorArrayToInit, uint8_t length);

PhraseTemplatesBlock sb_clonePhraseTemplatesBlock(PhraseTemplatesBlock* __PhraseTemplatesBlock);

StoreWordValue sb_createStoreWordValue(uint8_t wordId, uint32_t wordValueLength, uint8_t* wordValue);
void sb_saveStoreWordValue(void** cursor, StoreWordValue* _StoreWordValue);
StoreWordValue* sb_readStoreWordValue(void** cursor);
uint8_t sb_initStoreWordValue(void** cursor, StoreWordValue* _StoreWordValue);
void sb_cleanStoreWordValue(StoreWordValue* _StoreWordValue);
void sb_deleteStoreWordValue(StoreWordValue* _StoreWordValue);
uint32_t sb_getStructSizeStoreWordValue(StoreWordValue* _StoreWordValue);
uint8_t sb_isValidBufferSizeStoreWordValue(void** cursor, uint32_t bufferSize);

uint8_t sb_initStoreWordValue_Accessor(void** cursor, StoreWordValueAccessor* accessor);

uint8_t* sb_getStoreWordValue_wordId_Pointer(StoreWordValueAccessor* accessor);
uint32_t sb_getStoreWordValue_wordValue_ArrayLength(StoreWordValueAccessor* accessor);
uint8_t* sb_getStoreWordValue_wordValue_ArrayPointer(StoreWordValueAccessor* accessor);

StoreWordValue sb_cloneStoreWordValue(StoreWordValue* __StoreWordValue);

StorePhraseHistory sb_createStorePhraseHistory(uint8_t wordValuesLength, StoreWordValue* wordValues);
void sb_saveStorePhraseHistory(void** cursor, StorePhraseHistory* _StorePhraseHistory);
StorePhraseHistory* sb_readStorePhraseHistory(void** cursor);
uint8_t sb_initStorePhraseHistory(void** cursor, StorePhraseHistory* _StorePhraseHistory);
void sb_cleanStorePhraseHistory(StorePhraseHistory* _StorePhraseHistory);
void sb_deleteStorePhraseHistory(StorePhraseHistory* _StorePhraseHistory);
uint32_t sb_getStructSizeStorePhraseHistory(StorePhraseHistory* _StorePhraseHistory);
uint8_t sb_isValidBufferSizeStorePhraseHistory(void** cursor, uint32_t bufferSize);

uint8_t sb_initStorePhraseHistory_Accessor(void** cursor, StorePhraseHistoryAccessor* accessor);

uint8_t sb_getStorePhraseHistory_wordValues_ArrayLength(StorePhraseHistoryAccessor* accessor);
uint8_t sb_initStorePhraseHistory_wordValues_AccessorArray(StorePhraseHistoryAccessor* parentAccessor, StoreWordValueAccessor* accessorArrayToInit, uint8_t length);

StorePhraseHistory sb_cloneStorePhraseHistory(StorePhraseHistory* __StorePhraseHistory);

PhraseBlock sb_createPhraseBlock(StoreBlock block, uint8_t phraseTemplateId, uint8_t folderId, uint8_t phraseNameLength, uint8_t* phraseName, uint8_t historyLength, StorePhraseHistory* history);
void sb_savePhraseBlock(void** cursor, PhraseBlock* _PhraseBlock);
PhraseBlock* sb_readPhraseBlock(void** cursor);
uint8_t sb_initPhraseBlock(void** cursor, PhraseBlock* _PhraseBlock);
void sb_cleanPhraseBlock(PhraseBlock* _PhraseBlock);
void sb_deletePhraseBlock(PhraseBlock* _PhraseBlock);
uint32_t sb_getStructSizePhraseBlock(PhraseBlock* _PhraseBlock);
uint8_t sb_isValidBufferSizePhraseBlock(void** cursor, uint32_t bufferSize);

uint8_t sb_initPhraseBlock_Accessor(void** cursor, PhraseBlockAccessor* accessor);

uint8_t sb_initPhraseBlock_block_Accessor(PhraseBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit);
uint8_t* sb_getPhraseBlock_phraseTemplateId_Pointer(PhraseBlockAccessor* accessor);
uint8_t* sb_getPhraseBlock_folderId_Pointer(PhraseBlockAccessor* accessor);
uint8_t sb_getPhraseBlock_phraseName_ArrayLength(PhraseBlockAccessor* accessor);
uint8_t* sb_getPhraseBlock_phraseName_ArrayPointer(PhraseBlockAccessor* accessor);
uint8_t sb_getPhraseBlock_history_ArrayLength(PhraseBlockAccessor* accessor);
uint8_t sb_initPhraseBlock_history_AccessorArray(PhraseBlockAccessor* parentAccessor, StorePhraseHistoryAccessor* accessorArrayToInit, uint8_t length);

PhraseBlock sb_clonePhraseBlock(PhraseBlock* __PhraseBlock);

KeyBlock sb_createKeyBlock(StoreBlock block, uint8_t keyLength, uint8_t* key, uint8_t ivLength, uint8_t* iv);
void sb_saveKeyBlock(void** cursor, KeyBlock* _KeyBlock);
KeyBlock* sb_readKeyBlock(void** cursor);
uint8_t sb_initKeyBlock(void** cursor, KeyBlock* _KeyBlock);
void sb_cleanKeyBlock(KeyBlock* _KeyBlock);
void sb_deleteKeyBlock(KeyBlock* _KeyBlock);
uint32_t sb_getStructSizeKeyBlock(KeyBlock* _KeyBlock);
uint8_t sb_isValidBufferSizeKeyBlock(void** cursor, uint32_t bufferSize);

uint8_t sb_initKeyBlock_Accessor(void** cursor, KeyBlockAccessor* accessor);

uint8_t sb_initKeyBlock_block_Accessor(KeyBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit);
uint8_t sb_getKeyBlock_key_ArrayLength(KeyBlockAccessor* accessor);
uint8_t* sb_getKeyBlock_key_ArrayPointer(KeyBlockAccessor* accessor);
uint8_t sb_getKeyBlock_iv_ArrayLength(KeyBlockAccessor* accessor);
uint8_t* sb_getKeyBlock_iv_ArrayPointer(KeyBlockAccessor* accessor);

KeyBlock sb_cloneKeyBlock(KeyBlock* __KeyBlock);
