//This file was generated by StructBuf.

#include "StructBuf.h"

StoreBlock sb_createStoreBlock(uint32_t blockId, uint32_t version, uint8_t type);
void sb_saveStoreBlock(void** cursor, StoreBlock* _StoreBlock);
StoreBlock* sb_readStoreBlock(void** cursor);
uint8_t sb_initStoreBlock(void** cursor, StoreBlock* _StoreBlock);
void sb_cleanStoreBlock(StoreBlock* _StoreBlock);
void sb_deleteStoreBlock(StoreBlock* _StoreBlock);
uint32_t sb_getStructSizeStoreBlock(StoreBlock* _StoreBlock);
uint8_t sb_isValidBufferSizeStoreBlock(void** cursor, uint32_t bufferSize);

uint8_t sb_initStoreBlock_Accessor(void** cursor, StoreBlockAccessor* accessor);

uint32_t* sb_getStoreBlock_blockId_Pointer(StoreBlockAccessor* accessor);
uint32_t* sb_getStoreBlock_version_Pointer(StoreBlockAccessor* accessor);
uint8_t* sb_getStoreBlock_type_Pointer(StoreBlockAccessor* accessor);

StoreBlock sb_cloneStoreBlock(StoreBlock* __StoreBlock);

RegStoreBlockAndIndex sb_createRegStoreBlockAndIndex(StoreBlock block, uint32_t index);
void sb_saveRegStoreBlockAndIndex(void** cursor, RegStoreBlockAndIndex* _RegStoreBlockAndIndex);
RegStoreBlockAndIndex* sb_readRegStoreBlockAndIndex(void** cursor);
uint8_t sb_initRegStoreBlockAndIndex(void** cursor, RegStoreBlockAndIndex* _RegStoreBlockAndIndex);
void sb_cleanRegStoreBlockAndIndex(RegStoreBlockAndIndex* _RegStoreBlockAndIndex);
void sb_deleteRegStoreBlockAndIndex(RegStoreBlockAndIndex* _RegStoreBlockAndIndex);
uint32_t sb_getStructSizeRegStoreBlockAndIndex(RegStoreBlockAndIndex* _RegStoreBlockAndIndex);
uint8_t sb_isValidBufferSizeRegStoreBlockAndIndex(void** cursor, uint32_t bufferSize);

uint8_t sb_initRegStoreBlockAndIndex_Accessor(void** cursor, RegStoreBlockAndIndexAccessor* accessor);

uint8_t sb_initRegStoreBlockAndIndex_block_Accessor(RegStoreBlockAndIndexAccessor* parentAccessor, StoreBlockAccessor* accessorToInit);
uint32_t* sb_getRegStoreBlockAndIndex_index_Pointer(RegStoreBlockAndIndexAccessor* accessor);

RegStoreBlockAndIndex sb_cloneRegStoreBlockAndIndex(RegStoreBlockAndIndex* __RegStoreBlockAndIndex);

Folder sb_createFolder(uint8_t folderId, uint8_t parentFolderId, uint8_t folderNameLength, uint8_t* folderName);
void sb_saveFolder(void** cursor, Folder* _Folder);
Folder* sb_readFolder(void** cursor);
uint8_t sb_initFolder(void** cursor, Folder* _Folder);
void sb_cleanFolder(Folder* _Folder);
void sb_deleteFolder(Folder* _Folder);
uint32_t sb_getStructSizeFolder(Folder* _Folder);
uint8_t sb_isValidBufferSizeFolder(void** cursor, uint32_t bufferSize);

uint8_t sb_initFolder_Accessor(void** cursor, FolderAccessor* accessor);

uint8_t* sb_getFolder_folderId_Pointer(FolderAccessor* accessor);
uint8_t* sb_getFolder_parentFolderId_Pointer(FolderAccessor* accessor);
uint8_t sb_getFolder_folderName_ArrayLength(FolderAccessor* accessor);
uint8_t* sb_getFolder_folderName_ArrayPointer(FolderAccessor* accessor);

Folder sb_cloneFolder(Folder* __Folder);

FoldersBlock sb_createFoldersBlock(StoreBlock block, uint8_t foldersLength, Folder* folders);
void sb_saveFoldersBlock(void** cursor, FoldersBlock* _FoldersBlock);
FoldersBlock* sb_readFoldersBlock(void** cursor);
uint8_t sb_initFoldersBlock(void** cursor, FoldersBlock* _FoldersBlock);
void sb_cleanFoldersBlock(FoldersBlock* _FoldersBlock);
void sb_deleteFoldersBlock(FoldersBlock* _FoldersBlock);
uint32_t sb_getStructSizeFoldersBlock(FoldersBlock* _FoldersBlock);
uint8_t sb_isValidBufferSizeFoldersBlock(void** cursor, uint32_t bufferSize);

uint8_t sb_initFoldersBlock_Accessor(void** cursor, FoldersBlockAccessor* accessor);

uint8_t sb_initFoldersBlock_block_Accessor(FoldersBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit);
uint8_t sb_getFoldersBlock_folders_ArrayLength(FoldersBlockAccessor* accessor);
uint8_t sb_initFoldersBlock_folders_AccessorArray(FoldersBlockAccessor* parentAccessor, FolderAccessor* accessorArrayToInit, uint8_t length);

FoldersBlock sb_cloneFoldersBlock(FoldersBlock* __FoldersBlock);

SymbolSet sb_createSymbolSet(uint8_t setId, uint8_t symbolSetNameLength, uint8_t* symbolSetName, uint8_t symbolSetLength, uint8_t* symbolSet);
void sb_saveSymbolSet(void** cursor, SymbolSet* _SymbolSet);
SymbolSet* sb_readSymbolSet(void** cursor);
uint8_t sb_initSymbolSet(void** cursor, SymbolSet* _SymbolSet);
void sb_cleanSymbolSet(SymbolSet* _SymbolSet);
void sb_deleteSymbolSet(SymbolSet* _SymbolSet);
uint32_t sb_getStructSizeSymbolSet(SymbolSet* _SymbolSet);
uint8_t sb_isValidBufferSizeSymbolSet(void** cursor, uint32_t bufferSize);

uint8_t sb_initSymbolSet_Accessor(void** cursor, SymbolSetAccessor* accessor);

uint8_t* sb_getSymbolSet_setId_Pointer(SymbolSetAccessor* accessor);
uint8_t sb_getSymbolSet_symbolSetName_ArrayLength(SymbolSetAccessor* accessor);
uint8_t* sb_getSymbolSet_symbolSetName_ArrayPointer(SymbolSetAccessor* accessor);
uint8_t sb_getSymbolSet_symbolSet_ArrayLength(SymbolSetAccessor* accessor);
uint8_t* sb_getSymbolSet_symbolSet_ArrayPointer(SymbolSetAccessor* accessor);

SymbolSet sb_cloneSymbolSet(SymbolSet* __SymbolSet);

SymbolSetsBlock sb_createSymbolSetsBlock(StoreBlock block, uint8_t symbolSetsLength, SymbolSet* symbolSets);
void sb_saveSymbolSetsBlock(void** cursor, SymbolSetsBlock* _SymbolSetsBlock);
SymbolSetsBlock* sb_readSymbolSetsBlock(void** cursor);
uint8_t sb_initSymbolSetsBlock(void** cursor, SymbolSetsBlock* _SymbolSetsBlock);
void sb_cleanSymbolSetsBlock(SymbolSetsBlock* _SymbolSetsBlock);
void sb_deleteSymbolSetsBlock(SymbolSetsBlock* _SymbolSetsBlock);
uint32_t sb_getStructSizeSymbolSetsBlock(SymbolSetsBlock* _SymbolSetsBlock);
uint8_t sb_isValidBufferSizeSymbolSetsBlock(void** cursor, uint32_t bufferSize);

uint8_t sb_initSymbolSetsBlock_Accessor(void** cursor, SymbolSetsBlockAccessor* accessor);

uint8_t sb_initSymbolSetsBlock_block_Accessor(SymbolSetsBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit);
uint8_t sb_getSymbolSetsBlock_symbolSets_ArrayLength(SymbolSetsBlockAccessor* accessor);
uint8_t sb_initSymbolSetsBlock_symbolSets_AccessorArray(SymbolSetsBlockAccessor* parentAccessor, SymbolSetAccessor* accessorArrayToInit, uint8_t length);

SymbolSetsBlock sb_cloneSymbolSetsBlock(SymbolSetsBlock* __SymbolSetsBlock);

Word sb_createWord(uint8_t wordId, uint8_t flags, uint8_t icon, uint16_t minLength, uint16_t maxLength, uint8_t wordNameLength, uint8_t* wordName, uint8_t symbolSetIdsLength, uint8_t* symbolSetIds);
void sb_saveWord(void** cursor, Word* _Word);
Word* sb_readWord(void** cursor);
uint8_t sb_initWord(void** cursor, Word* _Word);
void sb_cleanWord(Word* _Word);
void sb_deleteWord(Word* _Word);
uint32_t sb_getStructSizeWord(Word* _Word);
uint8_t sb_isValidBufferSizeWord(void** cursor, uint32_t bufferSize);

uint8_t sb_initWord_Accessor(void** cursor, WordAccessor* accessor);

uint8_t* sb_getWord_wordId_Pointer(WordAccessor* accessor);
uint8_t* sb_getWord_flags_Pointer(WordAccessor* accessor);
uint8_t* sb_getWord_icon_Pointer(WordAccessor* accessor);
uint16_t* sb_getWord_minLength_Pointer(WordAccessor* accessor);
uint16_t* sb_getWord_maxLength_Pointer(WordAccessor* accessor);
uint8_t sb_getWord_wordName_ArrayLength(WordAccessor* accessor);
uint8_t* sb_getWord_wordName_ArrayPointer(WordAccessor* accessor);
uint8_t sb_getWord_symbolSetIds_ArrayLength(WordAccessor* accessor);
uint8_t* sb_getWord_symbolSetIds_ArrayPointer(WordAccessor* accessor);

Word sb_cloneWord(Word* __Word);

PhraseTemplate sb_createPhraseTemplate(uint8_t templateId, uint8_t templateNameLength, uint8_t* templateName, uint8_t wordsLength, Word* words);
void sb_savePhraseTemplate(void** cursor, PhraseTemplate* _PhraseTemplate);
PhraseTemplate* sb_readPhraseTemplate(void** cursor);
uint8_t sb_initPhraseTemplate(void** cursor, PhraseTemplate* _PhraseTemplate);
void sb_cleanPhraseTemplate(PhraseTemplate* _PhraseTemplate);
void sb_deletePhraseTemplate(PhraseTemplate* _PhraseTemplate);
uint32_t sb_getStructSizePhraseTemplate(PhraseTemplate* _PhraseTemplate);
uint8_t sb_isValidBufferSizePhraseTemplate(void** cursor, uint32_t bufferSize);

uint8_t sb_initPhraseTemplate_Accessor(void** cursor, PhraseTemplateAccessor* accessor);

uint8_t* sb_getPhraseTemplate_templateId_Pointer(PhraseTemplateAccessor* accessor);
uint8_t sb_getPhraseTemplate_templateName_ArrayLength(PhraseTemplateAccessor* accessor);
uint8_t* sb_getPhraseTemplate_templateName_ArrayPointer(PhraseTemplateAccessor* accessor);
uint8_t sb_getPhraseTemplate_words_ArrayLength(PhraseTemplateAccessor* accessor);
uint8_t sb_initPhraseTemplate_words_AccessorArray(PhraseTemplateAccessor* parentAccessor, WordAccessor* accessorArrayToInit, uint8_t length);

PhraseTemplate sb_clonePhraseTemplate(PhraseTemplate* __PhraseTemplate);

PhraseTemplatesBlock sb_createPhraseTemplatesBlock(StoreBlock block, uint8_t phraseTemplatesLength, PhraseTemplate* phraseTemplates);
void sb_savePhraseTemplatesBlock(void** cursor, PhraseTemplatesBlock* _PhraseTemplatesBlock);
PhraseTemplatesBlock* sb_readPhraseTemplatesBlock(void** cursor);
uint8_t sb_initPhraseTemplatesBlock(void** cursor, PhraseTemplatesBlock* _PhraseTemplatesBlock);
void sb_cleanPhraseTemplatesBlock(PhraseTemplatesBlock* _PhraseTemplatesBlock);
void sb_deletePhraseTemplatesBlock(PhraseTemplatesBlock* _PhraseTemplatesBlock);
uint32_t sb_getStructSizePhraseTemplatesBlock(PhraseTemplatesBlock* _PhraseTemplatesBlock);
uint8_t sb_isValidBufferSizePhraseTemplatesBlock(void** cursor, uint32_t bufferSize);

uint8_t sb_initPhraseTemplatesBlock_Accessor(void** cursor, PhraseTemplatesBlockAccessor* accessor);

uint8_t sb_initPhraseTemplatesBlock_block_Accessor(PhraseTemplatesBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit);
uint8_t sb_getPhraseTemplatesBlock_phraseTemplates_ArrayLength(PhraseTemplatesBlockAccessor* accessor);
uint8_t sb_initPhraseTemplatesBlock_phraseTemplates_AccessorArray(PhraseTemplatesBlockAccessor* parentAccessor, PhraseTemplateAccessor* accessorArrayToInit, uint8_t length);

PhraseTemplatesBlock sb_clonePhraseTemplatesBlock(PhraseTemplatesBlock* __PhraseTemplatesBlock);

StoreWordValue sb_createStoreWordValue(uint8_t wordId, uint32_t wordValueLength, uint8_t* wordValue);
void sb_saveStoreWordValue(void** cursor, StoreWordValue* _StoreWordValue);
StoreWordValue* sb_readStoreWordValue(void** cursor);
uint8_t sb_initStoreWordValue(void** cursor, StoreWordValue* _StoreWordValue);
void sb_cleanStoreWordValue(StoreWordValue* _StoreWordValue);
void sb_deleteStoreWordValue(StoreWordValue* _StoreWordValue);
uint32_t sb_getStructSizeStoreWordValue(StoreWordValue* _StoreWordValue);
uint8_t sb_isValidBufferSizeStoreWordValue(void** cursor, uint32_t bufferSize);

uint8_t sb_initStoreWordValue_Accessor(void** cursor, StoreWordValueAccessor* accessor);

uint8_t* sb_getStoreWordValue_wordId_Pointer(StoreWordValueAccessor* accessor);
uint32_t sb_getStoreWordValue_wordValue_ArrayLength(StoreWordValueAccessor* accessor);
uint8_t* sb_getStoreWordValue_wordValue_ArrayPointer(StoreWordValueAccessor* accessor);

StoreWordValue sb_cloneStoreWordValue(StoreWordValue* __StoreWordValue);

StorePhraseHistory sb_createStorePhraseHistory(uint8_t wordValuesLength, StoreWordValue* wordValues);
void sb_saveStorePhraseHistory(void** cursor, StorePhraseHistory* _StorePhraseHistory);
StorePhraseHistory* sb_readStorePhraseHistory(void** cursor);
uint8_t sb_initStorePhraseHistory(void** cursor, StorePhraseHistory* _StorePhraseHistory);
void sb_cleanStorePhraseHistory(StorePhraseHistory* _StorePhraseHistory);
void sb_deleteStorePhraseHistory(StorePhraseHistory* _StorePhraseHistory);
uint32_t sb_getStructSizeStorePhraseHistory(StorePhraseHistory* _StorePhraseHistory);
uint8_t sb_isValidBufferSizeStorePhraseHistory(void** cursor, uint32_t bufferSize);

uint8_t sb_initStorePhraseHistory_Accessor(void** cursor, StorePhraseHistoryAccessor* accessor);

uint8_t sb_getStorePhraseHistory_wordValues_ArrayLength(StorePhraseHistoryAccessor* accessor);
uint8_t sb_initStorePhraseHistory_wordValues_AccessorArray(StorePhraseHistoryAccessor* parentAccessor, StoreWordValueAccessor* accessorArrayToInit, uint8_t length);

StorePhraseHistory sb_cloneStorePhraseHistory(StorePhraseHistory* __StorePhraseHistory);

PhraseBlock sb_createPhraseBlock(StoreBlock block, uint8_t phraseTemplateId, uint8_t folderId, uint8_t phraseNameLength, uint8_t* phraseName, uint8_t historyLength, StorePhraseHistory* history);
void sb_savePhraseBlock(void** cursor, PhraseBlock* _PhraseBlock);
PhraseBlock* sb_readPhraseBlock(void** cursor);
uint8_t sb_initPhraseBlock(void** cursor, PhraseBlock* _PhraseBlock);
void sb_cleanPhraseBlock(PhraseBlock* _PhraseBlock);
void sb_deletePhraseBlock(PhraseBlock* _PhraseBlock);
uint32_t sb_getStructSizePhraseBlock(PhraseBlock* _PhraseBlock);
uint8_t sb_isValidBufferSizePhraseBlock(void** cursor, uint32_t bufferSize);

uint8_t sb_initPhraseBlock_Accessor(void** cursor, PhraseBlockAccessor* accessor);

uint8_t sb_initPhraseBlock_block_Accessor(PhraseBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit);
uint8_t* sb_getPhraseBlock_phraseTemplateId_Pointer(PhraseBlockAccessor* accessor);
uint8_t* sb_getPhraseBlock_folderId_Pointer(PhraseBlockAccessor* accessor);
uint8_t sb_getPhraseBlock_phraseName_ArrayLength(PhraseBlockAccessor* accessor);
uint8_t* sb_getPhraseBlock_phraseName_ArrayPointer(PhraseBlockAccessor* accessor);
uint8_t sb_getPhraseBlock_history_ArrayLength(PhraseBlockAccessor* accessor);
uint8_t sb_initPhraseBlock_history_AccessorArray(PhraseBlockAccessor* parentAccessor, StorePhraseHistoryAccessor* accessorArrayToInit, uint8_t length);

PhraseBlock sb_clonePhraseBlock(PhraseBlock* __PhraseBlock);

KeyBlock sb_createKeyBlock(StoreBlock block, uint8_t keyLength, uint8_t* key, uint8_t ivLength, uint8_t* iv);
void sb_saveKeyBlock(void** cursor, KeyBlock* _KeyBlock);
KeyBlock* sb_readKeyBlock(void** cursor);
uint8_t sb_initKeyBlock(void** cursor, KeyBlock* _KeyBlock);
void sb_cleanKeyBlock(KeyBlock* _KeyBlock);
void sb_deleteKeyBlock(KeyBlock* _KeyBlock);
uint32_t sb_getStructSizeKeyBlock(KeyBlock* _KeyBlock);
uint8_t sb_isValidBufferSizeKeyBlock(void** cursor, uint32_t bufferSize);

uint8_t sb_initKeyBlock_Accessor(void** cursor, KeyBlockAccessor* accessor);

uint8_t sb_initKeyBlock_block_Accessor(KeyBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit);
uint8_t sb_getKeyBlock_key_ArrayLength(KeyBlockAccessor* accessor);
uint8_t* sb_getKeyBlock_key_ArrayPointer(KeyBlockAccessor* accessor);
uint8_t sb_getKeyBlock_iv_ArrayLength(KeyBlockAccessor* accessor);
uint8_t* sb_getKeyBlock_iv_ArrayPointer(KeyBlockAccessor* accessor);

KeyBlock sb_cloneKeyBlock(KeyBlock* __KeyBlock);

// ------------------------------

StoreBlock sb_createStoreBlock(uint32_t blockId, uint32_t version, uint8_t type) {
    StoreBlock _StoreBlock;
    _StoreBlock.blockId = blockId;
    _StoreBlock.version = version;
    _StoreBlock.type = type;
    return _StoreBlock;
}


void sb_saveStoreBlock(void** cursor, StoreBlock* _StoreBlock) {
    streamSaveUint32_t(cursor, _StoreBlock->blockId);
    streamSaveUint32_t(cursor, _StoreBlock->version);
    streamSaveUint8_t(cursor, _StoreBlock->type);
}


StoreBlock* sb_readStoreBlock(void** cursor) {
    StoreBlock* _StoreBlock = (StoreBlock*)malloc(sizeof(StoreBlock));
    uint8_t result = sb_initStoreBlock(cursor, _StoreBlock);
    return _StoreBlock;
}

uint8_t sb_initStoreBlock(void** cursor, StoreBlock* _StoreBlock) {
    _StoreBlock->blockId = streamLoadUint32_t(cursor);
    _StoreBlock->version = streamLoadUint32_t(cursor);
    _StoreBlock->type = streamLoadUint8_t(cursor);
    return 1;
}


void sb_cleanStoreBlock(StoreBlock* _StoreBlock) {
}

void sb_deleteStoreBlock(StoreBlock* _StoreBlock) {
    sb_cleanStoreBlock(_StoreBlock);
    free(_StoreBlock);
}


uint32_t sb_getStructSizeStoreBlock(StoreBlock* _StoreBlock) {
    int retVal = 0;
    retVal += 4;
    retVal += 4;
    retVal += 1;
    return retVal;
}


uint8_t sb_isValidBufferSizeStoreBlock(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    (*cursor) += 4;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 4;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor)++;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initStoreBlock_Accessor(void** cursor, StoreBlockAccessor* accessor) {
    void* ptr = *cursor;
    accessor->blockId = ptr;
    ptr += sizeof(uint32_t);
    accessor->version = ptr;
    ptr += sizeof(uint32_t);
    accessor->type = ptr;
    ptr += sizeof(uint8_t);
    *cursor = ptr;
    return 1;
}

uint32_t* sb_getStoreBlock_blockId_Pointer(StoreBlockAccessor* accessor) {
    return (uint32_t*)accessor->blockId;
}

uint32_t* sb_getStoreBlock_version_Pointer(StoreBlockAccessor* accessor) {
    return (uint32_t*)accessor->version;
}

uint8_t* sb_getStoreBlock_type_Pointer(StoreBlockAccessor* accessor) {
    return (uint8_t*)accessor->type;
}



StoreBlock sb_cloneStoreBlock(StoreBlock* __StoreBlock) {
    StoreBlock _StoreBlock;
    _StoreBlock.blockId = __StoreBlock->blockId;
    _StoreBlock.version = __StoreBlock->version;
    _StoreBlock.type = __StoreBlock->type;
    return _StoreBlock;
}


// ------------------------------

RegStoreBlockAndIndex sb_createRegStoreBlockAndIndex(StoreBlock block, uint32_t index) {
    RegStoreBlockAndIndex _RegStoreBlockAndIndex;
    _RegStoreBlockAndIndex.block = block;
    _RegStoreBlockAndIndex.index = index;
    return _RegStoreBlockAndIndex;
}


void sb_saveRegStoreBlockAndIndex(void** cursor, RegStoreBlockAndIndex* _RegStoreBlockAndIndex) {
    sb_saveStoreBlock(cursor, &(_RegStoreBlockAndIndex->block));
    streamSaveUint32_t(cursor, _RegStoreBlockAndIndex->index);
}


RegStoreBlockAndIndex* sb_readRegStoreBlockAndIndex(void** cursor) {
    RegStoreBlockAndIndex* _RegStoreBlockAndIndex = (RegStoreBlockAndIndex*)malloc(sizeof(RegStoreBlockAndIndex));
    uint8_t result = sb_initRegStoreBlockAndIndex(cursor, _RegStoreBlockAndIndex);
    return _RegStoreBlockAndIndex;
}

uint8_t sb_initRegStoreBlockAndIndex(void** cursor, RegStoreBlockAndIndex* _RegStoreBlockAndIndex) {
    sb_initStoreBlock(cursor, &(_RegStoreBlockAndIndex->block));
    _RegStoreBlockAndIndex->index = streamLoadUint32_t(cursor);
    return 1;
}


void sb_cleanRegStoreBlockAndIndex(RegStoreBlockAndIndex* _RegStoreBlockAndIndex) {
    sb_cleanStoreBlock(&(_RegStoreBlockAndIndex->block));
}

void sb_deleteRegStoreBlockAndIndex(RegStoreBlockAndIndex* _RegStoreBlockAndIndex) {
    sb_cleanRegStoreBlockAndIndex(_RegStoreBlockAndIndex);
    free(_RegStoreBlockAndIndex);
}


uint32_t sb_getStructSizeRegStoreBlockAndIndex(RegStoreBlockAndIndex* _RegStoreBlockAndIndex) {
    int retVal = 0;
    retVal += sb_getStructSizeStoreBlock(&(_RegStoreBlockAndIndex->block));
    retVal += 4;
    return retVal;
}


uint8_t sb_isValidBufferSizeRegStoreBlockAndIndex(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    uint8_t blockLength = sb_isValidBufferSizeStoreBlock(cursor, bufferSize - ((uint8_t*)(*cursor) - (uint8_t*)original_cursor));
    if (blockLength == 0) return 0;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 4;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initRegStoreBlockAndIndex_Accessor(void** cursor, RegStoreBlockAndIndexAccessor* accessor) {
    void* ptr = *cursor;
    accessor->block = ptr;
    sb_isValidBufferSizeStoreBlock(&ptr, -1);
    accessor->index = ptr;
    ptr += sizeof(uint32_t);
    *cursor = ptr;
    return 1;
}

uint8_t sb_initRegStoreBlockAndIndex_block_Accessor(RegStoreBlockAndIndexAccessor* parentAccessor, StoreBlockAccessor* accessorToInit) {
    void* ptr = parentAccessor->block;
    return sb_initStoreBlock_Accessor(&ptr, accessorToInit);
}

uint32_t* sb_getRegStoreBlockAndIndex_index_Pointer(RegStoreBlockAndIndexAccessor* accessor) {
    return (uint32_t*)accessor->index;
}



RegStoreBlockAndIndex sb_cloneRegStoreBlockAndIndex(RegStoreBlockAndIndex* __RegStoreBlockAndIndex) {
    RegStoreBlockAndIndex _RegStoreBlockAndIndex;
    _RegStoreBlockAndIndex.block = sb_cloneStoreBlock(&(__RegStoreBlockAndIndex->block));
    _RegStoreBlockAndIndex.index = __RegStoreBlockAndIndex->index;
    return _RegStoreBlockAndIndex;
}


// ------------------------------

Folder sb_createFolder(uint8_t folderId, uint8_t parentFolderId, uint8_t folderNameLength, uint8_t* folderName) {
    Folder _Folder;
    _Folder.folderId = folderId;
    _Folder.parentFolderId = parentFolderId;
    _Folder.folderNameLength = folderNameLength;
    _Folder.folderName = folderName;
    return _Folder;
}


void sb_saveFolder(void** cursor, Folder* _Folder) {
    streamSaveUint8_t(cursor, _Folder->folderId);
    streamSaveUint8_t(cursor, _Folder->parentFolderId);
    streamSaveUint8_t(cursor, _Folder->folderNameLength);
    streamSaveData(cursor, _Folder->folderName, _Folder->folderNameLength*sizeof(uint8_t));
}


Folder* sb_readFolder(void** cursor) {
    Folder* _Folder = (Folder*)malloc(sizeof(Folder));
    uint8_t result = sb_initFolder(cursor, _Folder);
    return _Folder;
}

uint8_t sb_initFolder(void** cursor, Folder* _Folder) {
    _Folder->folderId = streamLoadUint8_t(cursor);
    _Folder->parentFolderId = streamLoadUint8_t(cursor);
    _Folder->folderNameLength = streamLoadUint8_t(cursor);
    _Folder->folderName = (uint8_t*)malloc(_Folder->folderNameLength*sizeof(uint8_t));
    streamLoadData(cursor, _Folder->folderName, _Folder->folderNameLength*sizeof(uint8_t));
    return 1;
}


void sb_cleanFolder(Folder* _Folder) {
    if (_Folder->folderNameLength > 0) {
        free(_Folder->folderName);
    }
}

void sb_deleteFolder(Folder* _Folder) {
    sb_cleanFolder(_Folder);
    free(_Folder);
}


uint32_t sb_getStructSizeFolder(Folder* _Folder) {
    int retVal = 0;
    retVal += 1;
    retVal += 1;
    retVal += 1;
    retVal += sizeof(uint8_t)*_Folder->folderNameLength;
    return retVal;
}


uint8_t sb_isValidBufferSizeFolder(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    (*cursor)++;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor)++;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t folderNameLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 1 * folderNameLength;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initFolder_Accessor(void** cursor, FolderAccessor* accessor) {
    void* ptr = *cursor;
    accessor->folderId = ptr;
    ptr += sizeof(uint8_t);
    accessor->parentFolderId = ptr;
    ptr += sizeof(uint8_t);
    accessor->folderName = ptr;
    uint8_t folderNameLength = streamLoadUint8_t(&ptr);
    ptr += folderNameLength*sizeof(uint8_t);
    *cursor = ptr;
    return 1;
}

uint8_t* sb_getFolder_folderId_Pointer(FolderAccessor* accessor) {
    return (uint8_t*)accessor->folderId;
}

uint8_t* sb_getFolder_parentFolderId_Pointer(FolderAccessor* accessor) {
    return (uint8_t*)accessor->parentFolderId;
}

uint8_t sb_getFolder_folderName_ArrayLength(FolderAccessor* accessor) {
    void* ptr = accessor->folderName;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t* sb_getFolder_folderName_ArrayPointer(FolderAccessor* accessor) {
    void* ptr = accessor->folderName;
    return (uint8_t*)(ptr + 1);
}



Folder sb_cloneFolder(Folder* __Folder) {
    Folder _Folder;
    _Folder.folderId = __Folder->folderId;
    _Folder.parentFolderId = __Folder->parentFolderId;
    _Folder.folderNameLength = __Folder->folderNameLength;
    _Folder.folderName = (uint8_t*)malloc(__Folder->folderNameLength*sizeof(uint8_t));
    memcpy(_Folder.folderName, __Folder->folderName, __Folder->folderNameLength*sizeof(uint8_t));
    return _Folder;
}


// ------------------------------

FoldersBlock sb_createFoldersBlock(StoreBlock block, uint8_t foldersLength, Folder* folders) {
    FoldersBlock _FoldersBlock;
    _FoldersBlock.block = block;
    _FoldersBlock.foldersLength = foldersLength;
    _FoldersBlock.folders = folders;
    return _FoldersBlock;
}


void sb_saveFoldersBlock(void** cursor, FoldersBlock* _FoldersBlock) {
    sb_saveStoreBlock(cursor, &(_FoldersBlock->block));
    streamSaveUint8_t(cursor, _FoldersBlock->foldersLength);
    for (uint32_t i = 0; i < _FoldersBlock->foldersLength; i++) {
        sb_saveFolder(cursor, &((_FoldersBlock->folders)[i]));
    }
}


FoldersBlock* sb_readFoldersBlock(void** cursor) {
    FoldersBlock* _FoldersBlock = (FoldersBlock*)malloc(sizeof(FoldersBlock));
    uint8_t result = sb_initFoldersBlock(cursor, _FoldersBlock);
    return _FoldersBlock;
}

uint8_t sb_initFoldersBlock(void** cursor, FoldersBlock* _FoldersBlock) {
    sb_initStoreBlock(cursor, &(_FoldersBlock->block));
    _FoldersBlock->foldersLength = streamLoadUint8_t(cursor);
    if (_FoldersBlock->foldersLength > 0) {    
        Folder* foldersArray = (Folder*)malloc(_FoldersBlock->foldersLength*sizeof(Folder));
        for (uint32_t i = 0; i < _FoldersBlock->foldersLength; i++) {
            sb_initFolder(cursor, &((foldersArray)[i]));
        }
        _FoldersBlock->folders = foldersArray;
    }
    return 1;
}


void sb_cleanFoldersBlock(FoldersBlock* _FoldersBlock) {
    sb_cleanStoreBlock(&(_FoldersBlock->block));
    if (_FoldersBlock->foldersLength > 0) {
        for (uint32_t i = 0; i < _FoldersBlock->foldersLength; i++) {
            sb_cleanFolder(&((_FoldersBlock->folders)[i]));
        }
        free(_FoldersBlock->folders);
    }
}

void sb_deleteFoldersBlock(FoldersBlock* _FoldersBlock) {
    sb_cleanFoldersBlock(_FoldersBlock);
    free(_FoldersBlock);
}


uint32_t sb_getStructSizeFoldersBlock(FoldersBlock* _FoldersBlock) {
    int retVal = 0;
    retVal += sb_getStructSizeStoreBlock(&(_FoldersBlock->block));
    retVal += 1;
    if (_FoldersBlock->foldersLength > 0) {
        for (uint32_t i = 0; i < _FoldersBlock->foldersLength; i++) {
            retVal += sb_getStructSizeFolder(&((_FoldersBlock->folders)[i]));
        }
    }
    return retVal;
}


uint8_t sb_isValidBufferSizeFoldersBlock(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    uint8_t blockLength = sb_isValidBufferSizeStoreBlock(cursor, bufferSize - ((uint8_t*)(*cursor) - (uint8_t*)original_cursor));
    if (blockLength == 0) return 0;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t foldersLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    if (foldersLength > 0) {    
        for (uint32_t i = 0; i < foldersLength; i++) {
            uint8_t foldersStructLength = sb_isValidBufferSizeFolder(cursor, bufferSize - ((uint8_t*)(*cursor) - (uint8_t*)original_cursor));
            if (foldersStructLength == 0) return 0;
            if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
        }
    }
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initFoldersBlock_Accessor(void** cursor, FoldersBlockAccessor* accessor) {
    void* ptr = *cursor;
    accessor->block = ptr;
    sb_isValidBufferSizeStoreBlock(&ptr, -1);
    accessor->folders = ptr;
    uint8_t foldersLength = streamLoadUint8_t(&ptr);
    for (uint8_t i = 0; i < foldersLength; i++) {
        sb_isValidBufferSizeFolder(&ptr, -1);
    }
    *cursor = ptr;
    return 1;
}

uint8_t sb_initFoldersBlock_block_Accessor(FoldersBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit) {
    void* ptr = parentAccessor->block;
    return sb_initStoreBlock_Accessor(&ptr, accessorToInit);
}

uint8_t sb_getFoldersBlock_folders_ArrayLength(FoldersBlockAccessor* accessor) {
    void* ptr = accessor->folders;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t sb_initFoldersBlock_folders_AccessorArray(FoldersBlockAccessor* parentAccessor, FolderAccessor* accessorArrayToInit, uint8_t length) {
    void* ptr = (parentAccessor->folders) + 1;
    for (uint8_t i = 0; i < length; i++) {
        FolderAccessor* accessorToInit = accessorArrayToInit + i;
        sb_initFolder_Accessor(&ptr, accessorToInit);
    }
    return 1;
}



FoldersBlock sb_cloneFoldersBlock(FoldersBlock* __FoldersBlock) {
    FoldersBlock _FoldersBlock;
    _FoldersBlock.block = sb_cloneStoreBlock(&(__FoldersBlock->block));
    _FoldersBlock.foldersLength = __FoldersBlock->foldersLength;
    if (__FoldersBlock->foldersLength > 0) {    
        Folder* foldersArray = (Folder*)malloc(__FoldersBlock->foldersLength*sizeof(Folder));
        for (uint32_t i = 0; i < __FoldersBlock->foldersLength; i++) {
            foldersArray[i] = sb_cloneFolder(&(__FoldersBlock->folders[i]));
        }
        _FoldersBlock.folders = foldersArray;
    }
    return _FoldersBlock;
}


// ------------------------------

SymbolSet sb_createSymbolSet(uint8_t setId, uint8_t symbolSetNameLength, uint8_t* symbolSetName, uint8_t symbolSetLength, uint8_t* symbolSet) {
    SymbolSet _SymbolSet;
    _SymbolSet.setId = setId;
    _SymbolSet.symbolSetNameLength = symbolSetNameLength;
    _SymbolSet.symbolSetName = symbolSetName;
    _SymbolSet.symbolSetLength = symbolSetLength;
    _SymbolSet.symbolSet = symbolSet;
    return _SymbolSet;
}


void sb_saveSymbolSet(void** cursor, SymbolSet* _SymbolSet) {
    streamSaveUint8_t(cursor, _SymbolSet->setId);
    streamSaveUint8_t(cursor, _SymbolSet->symbolSetNameLength);
    streamSaveData(cursor, _SymbolSet->symbolSetName, _SymbolSet->symbolSetNameLength*sizeof(uint8_t));
    streamSaveUint8_t(cursor, _SymbolSet->symbolSetLength);
    streamSaveData(cursor, _SymbolSet->symbolSet, _SymbolSet->symbolSetLength*sizeof(uint8_t));
}


SymbolSet* sb_readSymbolSet(void** cursor) {
    SymbolSet* _SymbolSet = (SymbolSet*)malloc(sizeof(SymbolSet));
    uint8_t result = sb_initSymbolSet(cursor, _SymbolSet);
    return _SymbolSet;
}

uint8_t sb_initSymbolSet(void** cursor, SymbolSet* _SymbolSet) {
    _SymbolSet->setId = streamLoadUint8_t(cursor);
    _SymbolSet->symbolSetNameLength = streamLoadUint8_t(cursor);
    _SymbolSet->symbolSetName = (uint8_t*)malloc(_SymbolSet->symbolSetNameLength*sizeof(uint8_t));
    streamLoadData(cursor, _SymbolSet->symbolSetName, _SymbolSet->symbolSetNameLength*sizeof(uint8_t));
    _SymbolSet->symbolSetLength = streamLoadUint8_t(cursor);
    _SymbolSet->symbolSet = (uint8_t*)malloc(_SymbolSet->symbolSetLength*sizeof(uint8_t));
    streamLoadData(cursor, _SymbolSet->symbolSet, _SymbolSet->symbolSetLength*sizeof(uint8_t));
    return 1;
}


void sb_cleanSymbolSet(SymbolSet* _SymbolSet) {
    if (_SymbolSet->symbolSetNameLength > 0) {
        free(_SymbolSet->symbolSetName);
    }
    if (_SymbolSet->symbolSetLength > 0) {
        free(_SymbolSet->symbolSet);
    }
}

void sb_deleteSymbolSet(SymbolSet* _SymbolSet) {
    sb_cleanSymbolSet(_SymbolSet);
    free(_SymbolSet);
}


uint32_t sb_getStructSizeSymbolSet(SymbolSet* _SymbolSet) {
    int retVal = 0;
    retVal += 1;
    retVal += 1;
    retVal += sizeof(uint8_t)*_SymbolSet->symbolSetNameLength;
    retVal += 1;
    retVal += sizeof(uint8_t)*_SymbolSet->symbolSetLength;
    return retVal;
}


uint8_t sb_isValidBufferSizeSymbolSet(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    (*cursor)++;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t symbolSetNameLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 1 * symbolSetNameLength;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t symbolSetLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 1 * symbolSetLength;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initSymbolSet_Accessor(void** cursor, SymbolSetAccessor* accessor) {
    void* ptr = *cursor;
    accessor->setId = ptr;
    ptr += sizeof(uint8_t);
    accessor->symbolSetName = ptr;
    uint8_t symbolSetNameLength = streamLoadUint8_t(&ptr);
    ptr += symbolSetNameLength*sizeof(uint8_t);
    accessor->symbolSet = ptr;
    uint8_t symbolSetLength = streamLoadUint8_t(&ptr);
    ptr += symbolSetLength*sizeof(uint8_t);
    *cursor = ptr;
    return 1;
}

uint8_t* sb_getSymbolSet_setId_Pointer(SymbolSetAccessor* accessor) {
    return (uint8_t*)accessor->setId;
}

uint8_t sb_getSymbolSet_symbolSetName_ArrayLength(SymbolSetAccessor* accessor) {
    void* ptr = accessor->symbolSetName;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t* sb_getSymbolSet_symbolSetName_ArrayPointer(SymbolSetAccessor* accessor) {
    void* ptr = accessor->symbolSetName;
    return (uint8_t*)(ptr + 1);
}

uint8_t sb_getSymbolSet_symbolSet_ArrayLength(SymbolSetAccessor* accessor) {
    void* ptr = accessor->symbolSet;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t* sb_getSymbolSet_symbolSet_ArrayPointer(SymbolSetAccessor* accessor) {
    void* ptr = accessor->symbolSet;
    return (uint8_t*)(ptr + 1);
}



SymbolSet sb_cloneSymbolSet(SymbolSet* __SymbolSet) {
    SymbolSet _SymbolSet;
    _SymbolSet.setId = __SymbolSet->setId;
    _SymbolSet.symbolSetNameLength = __SymbolSet->symbolSetNameLength;
    _SymbolSet.symbolSetName = (uint8_t*)malloc(__SymbolSet->symbolSetNameLength*sizeof(uint8_t));
    memcpy(_SymbolSet.symbolSetName, __SymbolSet->symbolSetName, __SymbolSet->symbolSetNameLength*sizeof(uint8_t));
    _SymbolSet.symbolSetLength = __SymbolSet->symbolSetLength;
    _SymbolSet.symbolSet = (uint8_t*)malloc(__SymbolSet->symbolSetLength*sizeof(uint8_t));
    memcpy(_SymbolSet.symbolSet, __SymbolSet->symbolSet, __SymbolSet->symbolSetLength*sizeof(uint8_t));
    return _SymbolSet;
}


// ------------------------------

SymbolSetsBlock sb_createSymbolSetsBlock(StoreBlock block, uint8_t symbolSetsLength, SymbolSet* symbolSets) {
    SymbolSetsBlock _SymbolSetsBlock;
    _SymbolSetsBlock.block = block;
    _SymbolSetsBlock.symbolSetsLength = symbolSetsLength;
    _SymbolSetsBlock.symbolSets = symbolSets;
    return _SymbolSetsBlock;
}


void sb_saveSymbolSetsBlock(void** cursor, SymbolSetsBlock* _SymbolSetsBlock) {
    sb_saveStoreBlock(cursor, &(_SymbolSetsBlock->block));
    streamSaveUint8_t(cursor, _SymbolSetsBlock->symbolSetsLength);
    for (uint32_t i = 0; i < _SymbolSetsBlock->symbolSetsLength; i++) {
        sb_saveSymbolSet(cursor, &((_SymbolSetsBlock->symbolSets)[i]));
    }
}


SymbolSetsBlock* sb_readSymbolSetsBlock(void** cursor) {
    SymbolSetsBlock* _SymbolSetsBlock = (SymbolSetsBlock*)malloc(sizeof(SymbolSetsBlock));
    uint8_t result = sb_initSymbolSetsBlock(cursor, _SymbolSetsBlock);
    return _SymbolSetsBlock;
}

uint8_t sb_initSymbolSetsBlock(void** cursor, SymbolSetsBlock* _SymbolSetsBlock) {
    sb_initStoreBlock(cursor, &(_SymbolSetsBlock->block));
    _SymbolSetsBlock->symbolSetsLength = streamLoadUint8_t(cursor);
    if (_SymbolSetsBlock->symbolSetsLength > 0) {    
        SymbolSet* symbolSetsArray = (SymbolSet*)malloc(_SymbolSetsBlock->symbolSetsLength*sizeof(SymbolSet));
        for (uint32_t i = 0; i < _SymbolSetsBlock->symbolSetsLength; i++) {
            sb_initSymbolSet(cursor, &((symbolSetsArray)[i]));
        }
        _SymbolSetsBlock->symbolSets = symbolSetsArray;
    }
    return 1;
}


void sb_cleanSymbolSetsBlock(SymbolSetsBlock* _SymbolSetsBlock) {
    sb_cleanStoreBlock(&(_SymbolSetsBlock->block));
    if (_SymbolSetsBlock->symbolSetsLength > 0) {
        for (uint32_t i = 0; i < _SymbolSetsBlock->symbolSetsLength; i++) {
            sb_cleanSymbolSet(&((_SymbolSetsBlock->symbolSets)[i]));
        }
        free(_SymbolSetsBlock->symbolSets);
    }
}

void sb_deleteSymbolSetsBlock(SymbolSetsBlock* _SymbolSetsBlock) {
    sb_cleanSymbolSetsBlock(_SymbolSetsBlock);
    free(_SymbolSetsBlock);
}


uint32_t sb_getStructSizeSymbolSetsBlock(SymbolSetsBlock* _SymbolSetsBlock) {
    int retVal = 0;
    retVal += sb_getStructSizeStoreBlock(&(_SymbolSetsBlock->block));
    retVal += 1;
    if (_SymbolSetsBlock->symbolSetsLength > 0) {
        for (uint32_t i = 0; i < _SymbolSetsBlock->symbolSetsLength; i++) {
            retVal += sb_getStructSizeSymbolSet(&((_SymbolSetsBlock->symbolSets)[i]));
        }
    }
    return retVal;
}


uint8_t sb_isValidBufferSizeSymbolSetsBlock(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    uint8_t blockLength = sb_isValidBufferSizeStoreBlock(cursor, bufferSize - ((uint8_t*)(*cursor) - (uint8_t*)original_cursor));
    if (blockLength == 0) return 0;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t symbolSetsLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    if (symbolSetsLength > 0) {    
        for (uint32_t i = 0; i < symbolSetsLength; i++) {
            uint8_t symbolSetsStructLength = sb_isValidBufferSizeSymbolSet(cursor, bufferSize - ((uint8_t*)(*cursor) - (uint8_t*)original_cursor));
            if (symbolSetsStructLength == 0) return 0;
            if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
        }
    }
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initSymbolSetsBlock_Accessor(void** cursor, SymbolSetsBlockAccessor* accessor) {
    void* ptr = *cursor;
    accessor->block = ptr;
    sb_isValidBufferSizeStoreBlock(&ptr, -1);
    accessor->symbolSets = ptr;
    uint8_t symbolSetsLength = streamLoadUint8_t(&ptr);
    for (uint8_t i = 0; i < symbolSetsLength; i++) {
        sb_isValidBufferSizeSymbolSet(&ptr, -1);
    }
    *cursor = ptr;
    return 1;
}

uint8_t sb_initSymbolSetsBlock_block_Accessor(SymbolSetsBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit) {
    void* ptr = parentAccessor->block;
    return sb_initStoreBlock_Accessor(&ptr, accessorToInit);
}

uint8_t sb_getSymbolSetsBlock_symbolSets_ArrayLength(SymbolSetsBlockAccessor* accessor) {
    void* ptr = accessor->symbolSets;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t sb_initSymbolSetsBlock_symbolSets_AccessorArray(SymbolSetsBlockAccessor* parentAccessor, SymbolSetAccessor* accessorArrayToInit, uint8_t length) {
    void* ptr = (parentAccessor->symbolSets) + 1;
    for (uint8_t i = 0; i < length; i++) {
        SymbolSetAccessor* accessorToInit = accessorArrayToInit + i;
        sb_initSymbolSet_Accessor(&ptr, accessorToInit);
    }
    return 1;
}



SymbolSetsBlock sb_cloneSymbolSetsBlock(SymbolSetsBlock* __SymbolSetsBlock) {
    SymbolSetsBlock _SymbolSetsBlock;
    _SymbolSetsBlock.block = sb_cloneStoreBlock(&(__SymbolSetsBlock->block));
    _SymbolSetsBlock.symbolSetsLength = __SymbolSetsBlock->symbolSetsLength;
    if (__SymbolSetsBlock->symbolSetsLength > 0) {    
        SymbolSet* symbolSetsArray = (SymbolSet*)malloc(__SymbolSetsBlock->symbolSetsLength*sizeof(SymbolSet));
        for (uint32_t i = 0; i < __SymbolSetsBlock->symbolSetsLength; i++) {
            symbolSetsArray[i] = sb_cloneSymbolSet(&(__SymbolSetsBlock->symbolSets[i]));
        }
        _SymbolSetsBlock.symbolSets = symbolSetsArray;
    }
    return _SymbolSetsBlock;
}


// ------------------------------

Word sb_createWord(uint8_t wordId, uint8_t flags, uint8_t icon, uint16_t minLength, uint16_t maxLength, uint8_t wordNameLength, uint8_t* wordName, uint8_t symbolSetIdsLength, uint8_t* symbolSetIds) {
    Word _Word;
    _Word.wordId = wordId;
    _Word.flags = flags;
    _Word.icon = icon;
    _Word.minLength = minLength;
    _Word.maxLength = maxLength;
    _Word.wordNameLength = wordNameLength;
    _Word.wordName = wordName;
    _Word.symbolSetIdsLength = symbolSetIdsLength;
    _Word.symbolSetIds = symbolSetIds;
    return _Word;
}


void sb_saveWord(void** cursor, Word* _Word) {
    streamSaveUint8_t(cursor, _Word->wordId);
    streamSaveUint8_t(cursor, _Word->flags);
    streamSaveUint8_t(cursor, _Word->icon);
    streamSaveUint16_t(cursor, _Word->minLength);
    streamSaveUint16_t(cursor, _Word->maxLength);
    streamSaveUint8_t(cursor, _Word->wordNameLength);
    streamSaveData(cursor, _Word->wordName, _Word->wordNameLength*sizeof(uint8_t));
    streamSaveUint8_t(cursor, _Word->symbolSetIdsLength);
    streamSaveData(cursor, _Word->symbolSetIds, _Word->symbolSetIdsLength*sizeof(uint8_t));
}


Word* sb_readWord(void** cursor) {
    Word* _Word = (Word*)malloc(sizeof(Word));
    uint8_t result = sb_initWord(cursor, _Word);
    return _Word;
}

uint8_t sb_initWord(void** cursor, Word* _Word) {
    _Word->wordId = streamLoadUint8_t(cursor);
    _Word->flags = streamLoadUint8_t(cursor);
    _Word->icon = streamLoadUint8_t(cursor);
    _Word->minLength = streamLoadUint16_t(cursor);
    _Word->maxLength = streamLoadUint16_t(cursor);
    _Word->wordNameLength = streamLoadUint8_t(cursor);
    _Word->wordName = (uint8_t*)malloc(_Word->wordNameLength*sizeof(uint8_t));
    streamLoadData(cursor, _Word->wordName, _Word->wordNameLength*sizeof(uint8_t));
    _Word->symbolSetIdsLength = streamLoadUint8_t(cursor);
    _Word->symbolSetIds = (uint8_t*)malloc(_Word->symbolSetIdsLength*sizeof(uint8_t));
    streamLoadData(cursor, _Word->symbolSetIds, _Word->symbolSetIdsLength*sizeof(uint8_t));
    return 1;
}


void sb_cleanWord(Word* _Word) {
    if (_Word->wordNameLength > 0) {
        free(_Word->wordName);
    }
    if (_Word->symbolSetIdsLength > 0) {
        free(_Word->symbolSetIds);
    }
}

void sb_deleteWord(Word* _Word) {
    sb_cleanWord(_Word);
    free(_Word);
}


uint32_t sb_getStructSizeWord(Word* _Word) {
    int retVal = 0;
    retVal += 1;
    retVal += 1;
    retVal += 1;
    retVal += 2;
    retVal += 2;
    retVal += 1;
    retVal += sizeof(uint8_t)*_Word->wordNameLength;
    retVal += 1;
    retVal += sizeof(uint8_t)*_Word->symbolSetIdsLength;
    return retVal;
}


uint8_t sb_isValidBufferSizeWord(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    (*cursor)++;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor)++;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor)++;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 2;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 2;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t wordNameLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 1 * wordNameLength;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t symbolSetIdsLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 1 * symbolSetIdsLength;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initWord_Accessor(void** cursor, WordAccessor* accessor) {
    void* ptr = *cursor;
    accessor->wordId = ptr;
    ptr += sizeof(uint8_t);
    accessor->flags = ptr;
    ptr += sizeof(uint8_t);
    accessor->icon = ptr;
    ptr += sizeof(uint8_t);
    accessor->minLength = ptr;
    ptr += sizeof(uint16_t);
    accessor->maxLength = ptr;
    ptr += sizeof(uint16_t);
    accessor->wordName = ptr;
    uint8_t wordNameLength = streamLoadUint8_t(&ptr);
    ptr += wordNameLength*sizeof(uint8_t);
    accessor->symbolSetIds = ptr;
    uint8_t symbolSetIdsLength = streamLoadUint8_t(&ptr);
    ptr += symbolSetIdsLength*sizeof(uint8_t);
    *cursor = ptr;
    return 1;
}

uint8_t* sb_getWord_wordId_Pointer(WordAccessor* accessor) {
    return (uint8_t*)accessor->wordId;
}

uint8_t* sb_getWord_flags_Pointer(WordAccessor* accessor) {
    return (uint8_t*)accessor->flags;
}

uint8_t* sb_getWord_icon_Pointer(WordAccessor* accessor) {
    return (uint8_t*)accessor->icon;
}

uint16_t* sb_getWord_minLength_Pointer(WordAccessor* accessor) {
    return (uint16_t*)accessor->minLength;
}

uint16_t* sb_getWord_maxLength_Pointer(WordAccessor* accessor) {
    return (uint16_t*)accessor->maxLength;
}

uint8_t sb_getWord_wordName_ArrayLength(WordAccessor* accessor) {
    void* ptr = accessor->wordName;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t* sb_getWord_wordName_ArrayPointer(WordAccessor* accessor) {
    void* ptr = accessor->wordName;
    return (uint8_t*)(ptr + 1);
}

uint8_t sb_getWord_symbolSetIds_ArrayLength(WordAccessor* accessor) {
    void* ptr = accessor->symbolSetIds;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t* sb_getWord_symbolSetIds_ArrayPointer(WordAccessor* accessor) {
    void* ptr = accessor->symbolSetIds;
    return (uint8_t*)(ptr + 1);
}



Word sb_cloneWord(Word* __Word) {
    Word _Word;
    _Word.wordId = __Word->wordId;
    _Word.flags = __Word->flags;
    _Word.icon = __Word->icon;
    _Word.minLength = __Word->minLength;
    _Word.maxLength = __Word->maxLength;
    _Word.wordNameLength = __Word->wordNameLength;
    _Word.wordName = (uint8_t*)malloc(__Word->wordNameLength*sizeof(uint8_t));
    memcpy(_Word.wordName, __Word->wordName, __Word->wordNameLength*sizeof(uint8_t));
    _Word.symbolSetIdsLength = __Word->symbolSetIdsLength;
    _Word.symbolSetIds = (uint8_t*)malloc(__Word->symbolSetIdsLength*sizeof(uint8_t));
    memcpy(_Word.symbolSetIds, __Word->symbolSetIds, __Word->symbolSetIdsLength*sizeof(uint8_t));
    return _Word;
}


// ------------------------------

PhraseTemplate sb_createPhraseTemplate(uint8_t templateId, uint8_t templateNameLength, uint8_t* templateName, uint8_t wordsLength, Word* words) {
    PhraseTemplate _PhraseTemplate;
    _PhraseTemplate.templateId = templateId;
    _PhraseTemplate.templateNameLength = templateNameLength;
    _PhraseTemplate.templateName = templateName;
    _PhraseTemplate.wordsLength = wordsLength;
    _PhraseTemplate.words = words;
    return _PhraseTemplate;
}


void sb_savePhraseTemplate(void** cursor, PhraseTemplate* _PhraseTemplate) {
    streamSaveUint8_t(cursor, _PhraseTemplate->templateId);
    streamSaveUint8_t(cursor, _PhraseTemplate->templateNameLength);
    streamSaveData(cursor, _PhraseTemplate->templateName, _PhraseTemplate->templateNameLength*sizeof(uint8_t));
    streamSaveUint8_t(cursor, _PhraseTemplate->wordsLength);
    for (uint32_t i = 0; i < _PhraseTemplate->wordsLength; i++) {
        sb_saveWord(cursor, &((_PhraseTemplate->words)[i]));
    }
}


PhraseTemplate* sb_readPhraseTemplate(void** cursor) {
    PhraseTemplate* _PhraseTemplate = (PhraseTemplate*)malloc(sizeof(PhraseTemplate));
    uint8_t result = sb_initPhraseTemplate(cursor, _PhraseTemplate);
    return _PhraseTemplate;
}

uint8_t sb_initPhraseTemplate(void** cursor, PhraseTemplate* _PhraseTemplate) {
    _PhraseTemplate->templateId = streamLoadUint8_t(cursor);
    _PhraseTemplate->templateNameLength = streamLoadUint8_t(cursor);
    _PhraseTemplate->templateName = (uint8_t*)malloc(_PhraseTemplate->templateNameLength*sizeof(uint8_t));
    streamLoadData(cursor, _PhraseTemplate->templateName, _PhraseTemplate->templateNameLength*sizeof(uint8_t));
    _PhraseTemplate->wordsLength = streamLoadUint8_t(cursor);
    if (_PhraseTemplate->wordsLength > 0) {    
        Word* wordsArray = (Word*)malloc(_PhraseTemplate->wordsLength*sizeof(Word));
        for (uint32_t i = 0; i < _PhraseTemplate->wordsLength; i++) {
            sb_initWord(cursor, &((wordsArray)[i]));
        }
        _PhraseTemplate->words = wordsArray;
    }
    return 1;
}


void sb_cleanPhraseTemplate(PhraseTemplate* _PhraseTemplate) {
    if (_PhraseTemplate->templateNameLength > 0) {
        free(_PhraseTemplate->templateName);
    }
    if (_PhraseTemplate->wordsLength > 0) {
        for (uint32_t i = 0; i < _PhraseTemplate->wordsLength; i++) {
            sb_cleanWord(&((_PhraseTemplate->words)[i]));
        }
        free(_PhraseTemplate->words);
    }
}

void sb_deletePhraseTemplate(PhraseTemplate* _PhraseTemplate) {
    sb_cleanPhraseTemplate(_PhraseTemplate);
    free(_PhraseTemplate);
}


uint32_t sb_getStructSizePhraseTemplate(PhraseTemplate* _PhraseTemplate) {
    int retVal = 0;
    retVal += 1;
    retVal += 1;
    retVal += sizeof(uint8_t)*_PhraseTemplate->templateNameLength;
    retVal += 1;
    if (_PhraseTemplate->wordsLength > 0) {
        for (uint32_t i = 0; i < _PhraseTemplate->wordsLength; i++) {
            retVal += sb_getStructSizeWord(&((_PhraseTemplate->words)[i]));
        }
    }
    return retVal;
}


uint8_t sb_isValidBufferSizePhraseTemplate(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    (*cursor)++;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t templateNameLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 1 * templateNameLength;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t wordsLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    if (wordsLength > 0) {    
        for (uint32_t i = 0; i < wordsLength; i++) {
            uint8_t wordsStructLength = sb_isValidBufferSizeWord(cursor, bufferSize - ((uint8_t*)(*cursor) - (uint8_t*)original_cursor));
            if (wordsStructLength == 0) return 0;
            if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
        }
    }
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initPhraseTemplate_Accessor(void** cursor, PhraseTemplateAccessor* accessor) {
    void* ptr = *cursor;
    accessor->templateId = ptr;
    ptr += sizeof(uint8_t);
    accessor->templateName = ptr;
    uint8_t templateNameLength = streamLoadUint8_t(&ptr);
    ptr += templateNameLength*sizeof(uint8_t);
    accessor->words = ptr;
    uint8_t wordsLength = streamLoadUint8_t(&ptr);
    for (uint8_t i = 0; i < wordsLength; i++) {
        sb_isValidBufferSizeWord(&ptr, -1);
    }
    *cursor = ptr;
    return 1;
}

uint8_t* sb_getPhraseTemplate_templateId_Pointer(PhraseTemplateAccessor* accessor) {
    return (uint8_t*)accessor->templateId;
}

uint8_t sb_getPhraseTemplate_templateName_ArrayLength(PhraseTemplateAccessor* accessor) {
    void* ptr = accessor->templateName;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t* sb_getPhraseTemplate_templateName_ArrayPointer(PhraseTemplateAccessor* accessor) {
    void* ptr = accessor->templateName;
    return (uint8_t*)(ptr + 1);
}

uint8_t sb_getPhraseTemplate_words_ArrayLength(PhraseTemplateAccessor* accessor) {
    void* ptr = accessor->words;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t sb_initPhraseTemplate_words_AccessorArray(PhraseTemplateAccessor* parentAccessor, WordAccessor* accessorArrayToInit, uint8_t length) {
    void* ptr = (parentAccessor->words) + 1;
    for (uint8_t i = 0; i < length; i++) {
        WordAccessor* accessorToInit = accessorArrayToInit + i;
        sb_initWord_Accessor(&ptr, accessorToInit);
    }
    return 1;
}



PhraseTemplate sb_clonePhraseTemplate(PhraseTemplate* __PhraseTemplate) {
    PhraseTemplate _PhraseTemplate;
    _PhraseTemplate.templateId = __PhraseTemplate->templateId;
    _PhraseTemplate.templateNameLength = __PhraseTemplate->templateNameLength;
    _PhraseTemplate.templateName = (uint8_t*)malloc(__PhraseTemplate->templateNameLength*sizeof(uint8_t));
    memcpy(_PhraseTemplate.templateName, __PhraseTemplate->templateName, __PhraseTemplate->templateNameLength*sizeof(uint8_t));
    _PhraseTemplate.wordsLength = __PhraseTemplate->wordsLength;
    if (__PhraseTemplate->wordsLength > 0) {    
        Word* wordsArray = (Word*)malloc(__PhraseTemplate->wordsLength*sizeof(Word));
        for (uint32_t i = 0; i < __PhraseTemplate->wordsLength; i++) {
            wordsArray[i] = sb_cloneWord(&(__PhraseTemplate->words[i]));
        }
        _PhraseTemplate.words = wordsArray;
    }
    return _PhraseTemplate;
}


// ------------------------------

PhraseTemplatesBlock sb_createPhraseTemplatesBlock(StoreBlock block, uint8_t phraseTemplatesLength, PhraseTemplate* phraseTemplates) {
    PhraseTemplatesBlock _PhraseTemplatesBlock;
    _PhraseTemplatesBlock.block = block;
    _PhraseTemplatesBlock.phraseTemplatesLength = phraseTemplatesLength;
    _PhraseTemplatesBlock.phraseTemplates = phraseTemplates;
    return _PhraseTemplatesBlock;
}


void sb_savePhraseTemplatesBlock(void** cursor, PhraseTemplatesBlock* _PhraseTemplatesBlock) {
    sb_saveStoreBlock(cursor, &(_PhraseTemplatesBlock->block));
    streamSaveUint8_t(cursor, _PhraseTemplatesBlock->phraseTemplatesLength);
    for (uint32_t i = 0; i < _PhraseTemplatesBlock->phraseTemplatesLength; i++) {
        sb_savePhraseTemplate(cursor, &((_PhraseTemplatesBlock->phraseTemplates)[i]));
    }
}


PhraseTemplatesBlock* sb_readPhraseTemplatesBlock(void** cursor) {
    PhraseTemplatesBlock* _PhraseTemplatesBlock = (PhraseTemplatesBlock*)malloc(sizeof(PhraseTemplatesBlock));
    uint8_t result = sb_initPhraseTemplatesBlock(cursor, _PhraseTemplatesBlock);
    return _PhraseTemplatesBlock;
}

uint8_t sb_initPhraseTemplatesBlock(void** cursor, PhraseTemplatesBlock* _PhraseTemplatesBlock) {
    sb_initStoreBlock(cursor, &(_PhraseTemplatesBlock->block));
    _PhraseTemplatesBlock->phraseTemplatesLength = streamLoadUint8_t(cursor);
    if (_PhraseTemplatesBlock->phraseTemplatesLength > 0) {    
        PhraseTemplate* phraseTemplatesArray = (PhraseTemplate*)malloc(_PhraseTemplatesBlock->phraseTemplatesLength*sizeof(PhraseTemplate));
        for (uint32_t i = 0; i < _PhraseTemplatesBlock->phraseTemplatesLength; i++) {
            sb_initPhraseTemplate(cursor, &((phraseTemplatesArray)[i]));
        }
        _PhraseTemplatesBlock->phraseTemplates = phraseTemplatesArray;
    }
    return 1;
}


void sb_cleanPhraseTemplatesBlock(PhraseTemplatesBlock* _PhraseTemplatesBlock) {
    sb_cleanStoreBlock(&(_PhraseTemplatesBlock->block));
    if (_PhraseTemplatesBlock->phraseTemplatesLength > 0) {
        for (uint32_t i = 0; i < _PhraseTemplatesBlock->phraseTemplatesLength; i++) {
            sb_cleanPhraseTemplate(&((_PhraseTemplatesBlock->phraseTemplates)[i]));
        }
        free(_PhraseTemplatesBlock->phraseTemplates);
    }
}

void sb_deletePhraseTemplatesBlock(PhraseTemplatesBlock* _PhraseTemplatesBlock) {
    sb_cleanPhraseTemplatesBlock(_PhraseTemplatesBlock);
    free(_PhraseTemplatesBlock);
}


uint32_t sb_getStructSizePhraseTemplatesBlock(PhraseTemplatesBlock* _PhraseTemplatesBlock) {
    int retVal = 0;
    retVal += sb_getStructSizeStoreBlock(&(_PhraseTemplatesBlock->block));
    retVal += 1;
    if (_PhraseTemplatesBlock->phraseTemplatesLength > 0) {
        for (uint32_t i = 0; i < _PhraseTemplatesBlock->phraseTemplatesLength; i++) {
            retVal += sb_getStructSizePhraseTemplate(&((_PhraseTemplatesBlock->phraseTemplates)[i]));
        }
    }
    return retVal;
}


uint8_t sb_isValidBufferSizePhraseTemplatesBlock(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    uint8_t blockLength = sb_isValidBufferSizeStoreBlock(cursor, bufferSize - ((uint8_t*)(*cursor) - (uint8_t*)original_cursor));
    if (blockLength == 0) return 0;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t phraseTemplatesLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    if (phraseTemplatesLength > 0) {    
        for (uint32_t i = 0; i < phraseTemplatesLength; i++) {
            uint8_t phraseTemplatesStructLength = sb_isValidBufferSizePhraseTemplate(cursor, bufferSize - ((uint8_t*)(*cursor) - (uint8_t*)original_cursor));
            if (phraseTemplatesStructLength == 0) return 0;
            if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
        }
    }
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initPhraseTemplatesBlock_Accessor(void** cursor, PhraseTemplatesBlockAccessor* accessor) {
    void* ptr = *cursor;
    accessor->block = ptr;
    sb_isValidBufferSizeStoreBlock(&ptr, -1);
    accessor->phraseTemplates = ptr;
    uint8_t phraseTemplatesLength = streamLoadUint8_t(&ptr);
    for (uint8_t i = 0; i < phraseTemplatesLength; i++) {
        sb_isValidBufferSizePhraseTemplate(&ptr, -1);
    }
    *cursor = ptr;
    return 1;
}

uint8_t sb_initPhraseTemplatesBlock_block_Accessor(PhraseTemplatesBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit) {
    void* ptr = parentAccessor->block;
    return sb_initStoreBlock_Accessor(&ptr, accessorToInit);
}

uint8_t sb_getPhraseTemplatesBlock_phraseTemplates_ArrayLength(PhraseTemplatesBlockAccessor* accessor) {
    void* ptr = accessor->phraseTemplates;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t sb_initPhraseTemplatesBlock_phraseTemplates_AccessorArray(PhraseTemplatesBlockAccessor* parentAccessor, PhraseTemplateAccessor* accessorArrayToInit, uint8_t length) {
    void* ptr = (parentAccessor->phraseTemplates) + 1;
    for (uint8_t i = 0; i < length; i++) {
        PhraseTemplateAccessor* accessorToInit = accessorArrayToInit + i;
        sb_initPhraseTemplate_Accessor(&ptr, accessorToInit);
    }
    return 1;
}



PhraseTemplatesBlock sb_clonePhraseTemplatesBlock(PhraseTemplatesBlock* __PhraseTemplatesBlock) {
    PhraseTemplatesBlock _PhraseTemplatesBlock;
    _PhraseTemplatesBlock.block = sb_cloneStoreBlock(&(__PhraseTemplatesBlock->block));
    _PhraseTemplatesBlock.phraseTemplatesLength = __PhraseTemplatesBlock->phraseTemplatesLength;
    if (__PhraseTemplatesBlock->phraseTemplatesLength > 0) {    
        PhraseTemplate* phraseTemplatesArray = (PhraseTemplate*)malloc(__PhraseTemplatesBlock->phraseTemplatesLength*sizeof(PhraseTemplate));
        for (uint32_t i = 0; i < __PhraseTemplatesBlock->phraseTemplatesLength; i++) {
            phraseTemplatesArray[i] = sb_clonePhraseTemplate(&(__PhraseTemplatesBlock->phraseTemplates[i]));
        }
        _PhraseTemplatesBlock.phraseTemplates = phraseTemplatesArray;
    }
    return _PhraseTemplatesBlock;
}


// ------------------------------

StoreWordValue sb_createStoreWordValue(uint8_t wordId, uint32_t wordValueLength, uint8_t* wordValue) {
    StoreWordValue _StoreWordValue;
    _StoreWordValue.wordId = wordId;
    _StoreWordValue.wordValueLength = wordValueLength;
    _StoreWordValue.wordValue = wordValue;
    return _StoreWordValue;
}


void sb_saveStoreWordValue(void** cursor, StoreWordValue* _StoreWordValue) {
    streamSaveUint8_t(cursor, _StoreWordValue->wordId);
    streamSaveUint32_t(cursor, _StoreWordValue->wordValueLength);
    streamSaveData(cursor, _StoreWordValue->wordValue, _StoreWordValue->wordValueLength*sizeof(uint8_t));
}


StoreWordValue* sb_readStoreWordValue(void** cursor) {
    StoreWordValue* _StoreWordValue = (StoreWordValue*)malloc(sizeof(StoreWordValue));
    uint8_t result = sb_initStoreWordValue(cursor, _StoreWordValue);
    return _StoreWordValue;
}

uint8_t sb_initStoreWordValue(void** cursor, StoreWordValue* _StoreWordValue) {
    _StoreWordValue->wordId = streamLoadUint8_t(cursor);
    _StoreWordValue->wordValueLength = streamLoadUint32_t(cursor);
    _StoreWordValue->wordValue = (uint8_t*)malloc(_StoreWordValue->wordValueLength*sizeof(uint8_t));
    streamLoadData(cursor, _StoreWordValue->wordValue, _StoreWordValue->wordValueLength*sizeof(uint8_t));
    return 1;
}


void sb_cleanStoreWordValue(StoreWordValue* _StoreWordValue) {
    if (_StoreWordValue->wordValueLength > 0) {
        free(_StoreWordValue->wordValue);
    }
}

void sb_deleteStoreWordValue(StoreWordValue* _StoreWordValue) {
    sb_cleanStoreWordValue(_StoreWordValue);
    free(_StoreWordValue);
}


uint32_t sb_getStructSizeStoreWordValue(StoreWordValue* _StoreWordValue) {
    int retVal = 0;
    retVal += 1;
    retVal += 4;
    retVal += sizeof(uint8_t)*_StoreWordValue->wordValueLength;
    return retVal;
}


uint8_t sb_isValidBufferSizeStoreWordValue(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    (*cursor)++;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint32_t wordValueLength = streamLoadUint32_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 1 * wordValueLength;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initStoreWordValue_Accessor(void** cursor, StoreWordValueAccessor* accessor) {
    void* ptr = *cursor;
    accessor->wordId = ptr;
    ptr += sizeof(uint8_t);
    accessor->wordValue = ptr;
    uint32_t wordValueLength = streamLoadUint32_t(&ptr);
    ptr += wordValueLength*sizeof(uint8_t);
    *cursor = ptr;
    return 1;
}

uint8_t* sb_getStoreWordValue_wordId_Pointer(StoreWordValueAccessor* accessor) {
    return (uint8_t*)accessor->wordId;
}

uint32_t sb_getStoreWordValue_wordValue_ArrayLength(StoreWordValueAccessor* accessor) {
    void* ptr = accessor->wordValue;
    uint32_t arrayLength = streamLoadUint32_t(&ptr);
    return arrayLength;
}

uint8_t* sb_getStoreWordValue_wordValue_ArrayPointer(StoreWordValueAccessor* accessor) {
    void* ptr = accessor->wordValue;
    return (uint8_t*)(ptr + 4);
}



StoreWordValue sb_cloneStoreWordValue(StoreWordValue* __StoreWordValue) {
    StoreWordValue _StoreWordValue;
    _StoreWordValue.wordId = __StoreWordValue->wordId;
    _StoreWordValue.wordValueLength = __StoreWordValue->wordValueLength;
    _StoreWordValue.wordValue = (uint8_t*)malloc(__StoreWordValue->wordValueLength*sizeof(uint8_t));
    memcpy(_StoreWordValue.wordValue, __StoreWordValue->wordValue, __StoreWordValue->wordValueLength*sizeof(uint8_t));
    return _StoreWordValue;
}


// ------------------------------

StorePhraseHistory sb_createStorePhraseHistory(uint8_t wordValuesLength, StoreWordValue* wordValues) {
    StorePhraseHistory _StorePhraseHistory;
    _StorePhraseHistory.wordValuesLength = wordValuesLength;
    _StorePhraseHistory.wordValues = wordValues;
    return _StorePhraseHistory;
}


void sb_saveStorePhraseHistory(void** cursor, StorePhraseHistory* _StorePhraseHistory) {
    streamSaveUint8_t(cursor, _StorePhraseHistory->wordValuesLength);
    for (uint32_t i = 0; i < _StorePhraseHistory->wordValuesLength; i++) {
        sb_saveStoreWordValue(cursor, &((_StorePhraseHistory->wordValues)[i]));
    }
}


StorePhraseHistory* sb_readStorePhraseHistory(void** cursor) {
    StorePhraseHistory* _StorePhraseHistory = (StorePhraseHistory*)malloc(sizeof(StorePhraseHistory));
    uint8_t result = sb_initStorePhraseHistory(cursor, _StorePhraseHistory);
    return _StorePhraseHistory;
}

uint8_t sb_initStorePhraseHistory(void** cursor, StorePhraseHistory* _StorePhraseHistory) {
    _StorePhraseHistory->wordValuesLength = streamLoadUint8_t(cursor);
    if (_StorePhraseHistory->wordValuesLength > 0) {    
        StoreWordValue* wordValuesArray = (StoreWordValue*)malloc(_StorePhraseHistory->wordValuesLength*sizeof(StoreWordValue));
        for (uint32_t i = 0; i < _StorePhraseHistory->wordValuesLength; i++) {
            sb_initStoreWordValue(cursor, &((wordValuesArray)[i]));
        }
        _StorePhraseHistory->wordValues = wordValuesArray;
    }
    return 1;
}


void sb_cleanStorePhraseHistory(StorePhraseHistory* _StorePhraseHistory) {
    if (_StorePhraseHistory->wordValuesLength > 0) {
        for (uint32_t i = 0; i < _StorePhraseHistory->wordValuesLength; i++) {
            sb_cleanStoreWordValue(&((_StorePhraseHistory->wordValues)[i]));
        }
        free(_StorePhraseHistory->wordValues);
    }
}

void sb_deleteStorePhraseHistory(StorePhraseHistory* _StorePhraseHistory) {
    sb_cleanStorePhraseHistory(_StorePhraseHistory);
    free(_StorePhraseHistory);
}


uint32_t sb_getStructSizeStorePhraseHistory(StorePhraseHistory* _StorePhraseHistory) {
    int retVal = 0;
    retVal += 1;
    if (_StorePhraseHistory->wordValuesLength > 0) {
        for (uint32_t i = 0; i < _StorePhraseHistory->wordValuesLength; i++) {
            retVal += sb_getStructSizeStoreWordValue(&((_StorePhraseHistory->wordValues)[i]));
        }
    }
    return retVal;
}


uint8_t sb_isValidBufferSizeStorePhraseHistory(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    uint8_t wordValuesLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    if (wordValuesLength > 0) {    
        for (uint32_t i = 0; i < wordValuesLength; i++) {
            uint8_t wordValuesStructLength = sb_isValidBufferSizeStoreWordValue(cursor, bufferSize - ((uint8_t*)(*cursor) - (uint8_t*)original_cursor));
            if (wordValuesStructLength == 0) return 0;
            if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
        }
    }
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initStorePhraseHistory_Accessor(void** cursor, StorePhraseHistoryAccessor* accessor) {
    void* ptr = *cursor;
    accessor->wordValues = ptr;
    uint8_t wordValuesLength = streamLoadUint8_t(&ptr);
    for (uint8_t i = 0; i < wordValuesLength; i++) {
        sb_isValidBufferSizeStoreWordValue(&ptr, -1);
    }
    *cursor = ptr;
    return 1;
}

uint8_t sb_getStorePhraseHistory_wordValues_ArrayLength(StorePhraseHistoryAccessor* accessor) {
    void* ptr = accessor->wordValues;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t sb_initStorePhraseHistory_wordValues_AccessorArray(StorePhraseHistoryAccessor* parentAccessor, StoreWordValueAccessor* accessorArrayToInit, uint8_t length) {
    void* ptr = (parentAccessor->wordValues) + 1;
    for (uint8_t i = 0; i < length; i++) {
        StoreWordValueAccessor* accessorToInit = accessorArrayToInit + i;
        sb_initStoreWordValue_Accessor(&ptr, accessorToInit);
    }
    return 1;
}



StorePhraseHistory sb_cloneStorePhraseHistory(StorePhraseHistory* __StorePhraseHistory) {
    StorePhraseHistory _StorePhraseHistory;
    _StorePhraseHistory.wordValuesLength = __StorePhraseHistory->wordValuesLength;
    if (__StorePhraseHistory->wordValuesLength > 0) {    
        StoreWordValue* wordValuesArray = (StoreWordValue*)malloc(__StorePhraseHistory->wordValuesLength*sizeof(StoreWordValue));
        for (uint32_t i = 0; i < __StorePhraseHistory->wordValuesLength; i++) {
            wordValuesArray[i] = sb_cloneStoreWordValue(&(__StorePhraseHistory->wordValues[i]));
        }
        _StorePhraseHistory.wordValues = wordValuesArray;
    }
    return _StorePhraseHistory;
}


// ------------------------------

PhraseBlock sb_createPhraseBlock(StoreBlock block, uint8_t phraseTemplateId, uint8_t folderId, uint8_t phraseNameLength, uint8_t* phraseName, uint8_t historyLength, StorePhraseHistory* history) {
    PhraseBlock _PhraseBlock;
    _PhraseBlock.block = block;
    _PhraseBlock.phraseTemplateId = phraseTemplateId;
    _PhraseBlock.folderId = folderId;
    _PhraseBlock.phraseNameLength = phraseNameLength;
    _PhraseBlock.phraseName = phraseName;
    _PhraseBlock.historyLength = historyLength;
    _PhraseBlock.history = history;
    return _PhraseBlock;
}


void sb_savePhraseBlock(void** cursor, PhraseBlock* _PhraseBlock) {
    sb_saveStoreBlock(cursor, &(_PhraseBlock->block));
    streamSaveUint8_t(cursor, _PhraseBlock->phraseTemplateId);
    streamSaveUint8_t(cursor, _PhraseBlock->folderId);
    streamSaveUint8_t(cursor, _PhraseBlock->phraseNameLength);
    streamSaveData(cursor, _PhraseBlock->phraseName, _PhraseBlock->phraseNameLength*sizeof(uint8_t));
    streamSaveUint8_t(cursor, _PhraseBlock->historyLength);
    for (uint32_t i = 0; i < _PhraseBlock->historyLength; i++) {
        sb_saveStorePhraseHistory(cursor, &((_PhraseBlock->history)[i]));
    }
}


PhraseBlock* sb_readPhraseBlock(void** cursor) {
    PhraseBlock* _PhraseBlock = (PhraseBlock*)malloc(sizeof(PhraseBlock));
    uint8_t result = sb_initPhraseBlock(cursor, _PhraseBlock);
    return _PhraseBlock;
}

uint8_t sb_initPhraseBlock(void** cursor, PhraseBlock* _PhraseBlock) {
    sb_initStoreBlock(cursor, &(_PhraseBlock->block));
    _PhraseBlock->phraseTemplateId = streamLoadUint8_t(cursor);
    _PhraseBlock->folderId = streamLoadUint8_t(cursor);
    _PhraseBlock->phraseNameLength = streamLoadUint8_t(cursor);
    _PhraseBlock->phraseName = (uint8_t*)malloc(_PhraseBlock->phraseNameLength*sizeof(uint8_t));
    streamLoadData(cursor, _PhraseBlock->phraseName, _PhraseBlock->phraseNameLength*sizeof(uint8_t));
    _PhraseBlock->historyLength = streamLoadUint8_t(cursor);
    if (_PhraseBlock->historyLength > 0) {    
        StorePhraseHistory* historyArray = (StorePhraseHistory*)malloc(_PhraseBlock->historyLength*sizeof(StorePhraseHistory));
        for (uint32_t i = 0; i < _PhraseBlock->historyLength; i++) {
            sb_initStorePhraseHistory(cursor, &((historyArray)[i]));
        }
        _PhraseBlock->history = historyArray;
    }
    return 1;
}


void sb_cleanPhraseBlock(PhraseBlock* _PhraseBlock) {
    sb_cleanStoreBlock(&(_PhraseBlock->block));
    if (_PhraseBlock->phraseNameLength > 0) {
        free(_PhraseBlock->phraseName);
    }
    if (_PhraseBlock->historyLength > 0) {
        for (uint32_t i = 0; i < _PhraseBlock->historyLength; i++) {
            sb_cleanStorePhraseHistory(&((_PhraseBlock->history)[i]));
        }
        free(_PhraseBlock->history);
    }
}

void sb_deletePhraseBlock(PhraseBlock* _PhraseBlock) {
    sb_cleanPhraseBlock(_PhraseBlock);
    free(_PhraseBlock);
}


uint32_t sb_getStructSizePhraseBlock(PhraseBlock* _PhraseBlock) {
    int retVal = 0;
    retVal += sb_getStructSizeStoreBlock(&(_PhraseBlock->block));
    retVal += 1;
    retVal += 1;
    retVal += 1;
    retVal += sizeof(uint8_t)*_PhraseBlock->phraseNameLength;
    retVal += 1;
    if (_PhraseBlock->historyLength > 0) {
        for (uint32_t i = 0; i < _PhraseBlock->historyLength; i++) {
            retVal += sb_getStructSizeStorePhraseHistory(&((_PhraseBlock->history)[i]));
        }
    }
    return retVal;
}


uint8_t sb_isValidBufferSizePhraseBlock(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    uint8_t blockLength = sb_isValidBufferSizeStoreBlock(cursor, bufferSize - ((uint8_t*)(*cursor) - (uint8_t*)original_cursor));
    if (blockLength == 0) return 0;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor)++;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor)++;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t phraseNameLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 1 * phraseNameLength;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t historyLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    if (historyLength > 0) {    
        for (uint32_t i = 0; i < historyLength; i++) {
            uint8_t historyStructLength = sb_isValidBufferSizeStorePhraseHistory(cursor, bufferSize - ((uint8_t*)(*cursor) - (uint8_t*)original_cursor));
            if (historyStructLength == 0) return 0;
            if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
        }
    }
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initPhraseBlock_Accessor(void** cursor, PhraseBlockAccessor* accessor) {
    void* ptr = *cursor;
    accessor->block = ptr;
    sb_isValidBufferSizeStoreBlock(&ptr, -1);
    accessor->phraseTemplateId = ptr;
    ptr += sizeof(uint8_t);
    accessor->folderId = ptr;
    ptr += sizeof(uint8_t);
    accessor->phraseName = ptr;
    uint8_t phraseNameLength = streamLoadUint8_t(&ptr);
    ptr += phraseNameLength*sizeof(uint8_t);
    accessor->history = ptr;
    uint8_t historyLength = streamLoadUint8_t(&ptr);
    for (uint8_t i = 0; i < historyLength; i++) {
        sb_isValidBufferSizeStorePhraseHistory(&ptr, -1);
    }
    *cursor = ptr;
    return 1;
}

uint8_t sb_initPhraseBlock_block_Accessor(PhraseBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit) {
    void* ptr = parentAccessor->block;
    return sb_initStoreBlock_Accessor(&ptr, accessorToInit);
}

uint8_t* sb_getPhraseBlock_phraseTemplateId_Pointer(PhraseBlockAccessor* accessor) {
    return (uint8_t*)accessor->phraseTemplateId;
}

uint8_t* sb_getPhraseBlock_folderId_Pointer(PhraseBlockAccessor* accessor) {
    return (uint8_t*)accessor->folderId;
}

uint8_t sb_getPhraseBlock_phraseName_ArrayLength(PhraseBlockAccessor* accessor) {
    void* ptr = accessor->phraseName;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t* sb_getPhraseBlock_phraseName_ArrayPointer(PhraseBlockAccessor* accessor) {
    void* ptr = accessor->phraseName;
    return (uint8_t*)(ptr + 1);
}

uint8_t sb_getPhraseBlock_history_ArrayLength(PhraseBlockAccessor* accessor) {
    void* ptr = accessor->history;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t sb_initPhraseBlock_history_AccessorArray(PhraseBlockAccessor* parentAccessor, StorePhraseHistoryAccessor* accessorArrayToInit, uint8_t length) {
    void* ptr = (parentAccessor->history) + 1;
    for (uint8_t i = 0; i < length; i++) {
        StorePhraseHistoryAccessor* accessorToInit = accessorArrayToInit + i;
        sb_initStorePhraseHistory_Accessor(&ptr, accessorToInit);
    }
    return 1;
}



PhraseBlock sb_clonePhraseBlock(PhraseBlock* __PhraseBlock) {
    PhraseBlock _PhraseBlock;
    _PhraseBlock.block = sb_cloneStoreBlock(&(__PhraseBlock->block));
    _PhraseBlock.phraseTemplateId = __PhraseBlock->phraseTemplateId;
    _PhraseBlock.folderId = __PhraseBlock->folderId;
    _PhraseBlock.phraseNameLength = __PhraseBlock->phraseNameLength;
    _PhraseBlock.phraseName = (uint8_t*)malloc(__PhraseBlock->phraseNameLength*sizeof(uint8_t));
    memcpy(_PhraseBlock.phraseName, __PhraseBlock->phraseName, __PhraseBlock->phraseNameLength*sizeof(uint8_t));
    _PhraseBlock.historyLength = __PhraseBlock->historyLength;
    if (__PhraseBlock->historyLength > 0) {    
        StorePhraseHistory* historyArray = (StorePhraseHistory*)malloc(__PhraseBlock->historyLength*sizeof(StorePhraseHistory));
        for (uint32_t i = 0; i < __PhraseBlock->historyLength; i++) {
            historyArray[i] = sb_cloneStorePhraseHistory(&(__PhraseBlock->history[i]));
        }
        _PhraseBlock.history = historyArray;
    }
    return _PhraseBlock;
}


// ------------------------------

KeyBlock sb_createKeyBlock(StoreBlock block, uint8_t keyLength, uint8_t* key, uint8_t ivLength, uint8_t* iv) {
    KeyBlock _KeyBlock;
    _KeyBlock.block = block;
    _KeyBlock.keyLength = keyLength;
    _KeyBlock.key = key;
    _KeyBlock.ivLength = ivLength;
    _KeyBlock.iv = iv;
    return _KeyBlock;
}


void sb_saveKeyBlock(void** cursor, KeyBlock* _KeyBlock) {
    sb_saveStoreBlock(cursor, &(_KeyBlock->block));
    streamSaveUint8_t(cursor, _KeyBlock->keyLength);
    streamSaveData(cursor, _KeyBlock->key, _KeyBlock->keyLength*sizeof(uint8_t));
    streamSaveUint8_t(cursor, _KeyBlock->ivLength);
    streamSaveData(cursor, _KeyBlock->iv, _KeyBlock->ivLength*sizeof(uint8_t));
}


KeyBlock* sb_readKeyBlock(void** cursor) {
    KeyBlock* _KeyBlock = (KeyBlock*)malloc(sizeof(KeyBlock));
    uint8_t result = sb_initKeyBlock(cursor, _KeyBlock);
    return _KeyBlock;
}

uint8_t sb_initKeyBlock(void** cursor, KeyBlock* _KeyBlock) {
    sb_initStoreBlock(cursor, &(_KeyBlock->block));
    _KeyBlock->keyLength = streamLoadUint8_t(cursor);
    _KeyBlock->key = (uint8_t*)malloc(_KeyBlock->keyLength*sizeof(uint8_t));
    streamLoadData(cursor, _KeyBlock->key, _KeyBlock->keyLength*sizeof(uint8_t));
    _KeyBlock->ivLength = streamLoadUint8_t(cursor);
    _KeyBlock->iv = (uint8_t*)malloc(_KeyBlock->ivLength*sizeof(uint8_t));
    streamLoadData(cursor, _KeyBlock->iv, _KeyBlock->ivLength*sizeof(uint8_t));
    return 1;
}


void sb_cleanKeyBlock(KeyBlock* _KeyBlock) {
    sb_cleanStoreBlock(&(_KeyBlock->block));
    if (_KeyBlock->keyLength > 0) {
        free(_KeyBlock->key);
    }
    if (_KeyBlock->ivLength > 0) {
        free(_KeyBlock->iv);
    }
}

void sb_deleteKeyBlock(KeyBlock* _KeyBlock) {
    sb_cleanKeyBlock(_KeyBlock);
    free(_KeyBlock);
}


uint32_t sb_getStructSizeKeyBlock(KeyBlock* _KeyBlock) {
    int retVal = 0;
    retVal += sb_getStructSizeStoreBlock(&(_KeyBlock->block));
    retVal += 1;
    retVal += sizeof(uint8_t)*_KeyBlock->keyLength;
    retVal += 1;
    retVal += sizeof(uint8_t)*_KeyBlock->ivLength;
    return retVal;
}


uint8_t sb_isValidBufferSizeKeyBlock(void** cursor, uint32_t bufferSize) {
    void* original_cursor = (*cursor);
    uint8_t blockLength = sb_isValidBufferSizeStoreBlock(cursor, bufferSize - ((uint8_t*)(*cursor) - (uint8_t*)original_cursor));
    if (blockLength == 0) return 0;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t keyLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 1 * keyLength;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    uint8_t ivLength = streamLoadUint8_t(cursor);
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    (*cursor) += 1 * ivLength;
    if ((uint8_t*)(*cursor) - (uint8_t*)original_cursor > bufferSize) return 0;
    return 1;
}




uint8_t sb_initKeyBlock_Accessor(void** cursor, KeyBlockAccessor* accessor) {
    void* ptr = *cursor;
    accessor->block = ptr;
    sb_isValidBufferSizeStoreBlock(&ptr, -1);
    accessor->key = ptr;
    uint8_t keyLength = streamLoadUint8_t(&ptr);
    ptr += keyLength*sizeof(uint8_t);
    accessor->iv = ptr;
    uint8_t ivLength = streamLoadUint8_t(&ptr);
    ptr += ivLength*sizeof(uint8_t);
    *cursor = ptr;
    return 1;
}

uint8_t sb_initKeyBlock_block_Accessor(KeyBlockAccessor* parentAccessor, StoreBlockAccessor* accessorToInit) {
    void* ptr = parentAccessor->block;
    return sb_initStoreBlock_Accessor(&ptr, accessorToInit);
}

uint8_t sb_getKeyBlock_key_ArrayLength(KeyBlockAccessor* accessor) {
    void* ptr = accessor->key;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t* sb_getKeyBlock_key_ArrayPointer(KeyBlockAccessor* accessor) {
    void* ptr = accessor->key;
    return (uint8_t*)(ptr + 1);
}

uint8_t sb_getKeyBlock_iv_ArrayLength(KeyBlockAccessor* accessor) {
    void* ptr = accessor->iv;
    uint8_t arrayLength = streamLoadUint8_t(&ptr);
    return arrayLength;
}

uint8_t* sb_getKeyBlock_iv_ArrayPointer(KeyBlockAccessor* accessor) {
    void* ptr = accessor->iv;
    return (uint8_t*)(ptr + 1);
}



KeyBlock sb_cloneKeyBlock(KeyBlock* __KeyBlock) {
    KeyBlock _KeyBlock;
    _KeyBlock.block = sb_cloneStoreBlock(&(__KeyBlock->block));
    _KeyBlock.keyLength = __KeyBlock->keyLength;
    _KeyBlock.key = (uint8_t*)malloc(__KeyBlock->keyLength*sizeof(uint8_t));
    memcpy(_KeyBlock.key, __KeyBlock->key, __KeyBlock->keyLength*sizeof(uint8_t));
    _KeyBlock.ivLength = __KeyBlock->ivLength;
    _KeyBlock.iv = (uint8_t*)malloc(__KeyBlock->ivLength*sizeof(uint8_t));
    memcpy(_KeyBlock.iv, __KeyBlock->iv, __KeyBlock->ivLength*sizeof(uint8_t));
    return _KeyBlock;
}
